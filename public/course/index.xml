<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Courses on TutorialEdge.net</title>
    <link>https://tutorialedge.net/course/index.xml</link>
    <description>Recent content in Courses on TutorialEdge.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Apr 2017 20:27:58 +0100</lastBuildDate>
    <atom:link href="https://tutorialedge.net/course/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Angular Fundamentals</title>
      <link>https://tutorialedge.net/course/angular/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://tutorialedge.net/course/angular/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Angular 2 is the latest iteration of the wildly successful Angular framework and this course is designed to take you all the way from the basics through to creating high-quality angular applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This course is built using a minimum of &lt;strong&gt;Angular 2.2&lt;/strong&gt;. I&amp;rsquo;ve also focused on building these tutorials purely in Typescript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;beginner-tutorials&#34;&gt;Beginner Tutorials:&lt;/h2&gt;

&lt;h4 id=&#34;modules&#34;&gt;Modules&lt;/h4&gt;

&lt;p&gt;Learn the fundamentals of Angular modules and how they are used in angular applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-modules-tutorial&#34;&gt;Angular 2 Modules Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;components&#34;&gt;Components&lt;/h4&gt;

&lt;p&gt;The web is moving towards more component based applications. Being able to define components once and reuse them multiple times throughout your applications is exceptionally useful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-components-tutorial&#34;&gt;Angular 2 Components Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;services&#34;&gt;Services&lt;/h4&gt;

&lt;p&gt;If your applications interact with REST APIs at all then you&amp;rsquo;ll want to utilize services within your application. In this section we look at how to build your own services that can be used throughout your site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-services-tutorial&#34;&gt;Angular 2 Services Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;environment-configuration&#34;&gt;Environment Configuration&lt;/h4&gt;

&lt;p&gt;Easily configuring different applications for different environments is important. This section shows you exactly how we can do that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-environment-configuration-tutorial&#34;&gt;Angular Environment Configuration Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;routing&#34;&gt;Routing&lt;/h4&gt;

&lt;p&gt;Most Complicated Angular applications will require some form of routing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-routing-tutorial&#34;&gt;Angular Routing Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;websockets&#34;&gt;Websockets&lt;/h4&gt;

&lt;p&gt;Explore the power and versatility of using websockets in your angular applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-websockets-tutorial&#34;&gt;Angular 2 Websockets Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cookies&#34;&gt;Cookies&lt;/h4&gt;

&lt;p&gt;Cookies can be very handy for developing certain types of application. They are used for a wide range of things such as authentication or even storing previous search history and favourites on large shopping sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-cookies-tutorial&#34;&gt;Angular 2 Cookies Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;miscellaneous-tutorials&#34;&gt;Miscellaneous Tutorials&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-get-current-route-location&#34;&gt;Angular 2 Getting Current Route Using the Location Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angular-2-detecting-route-changes&#34;&gt;Angular 2 Detecting Route Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;example-angular-2-applications&#34;&gt;Example Angular 2 Applications:&lt;/h1&gt;

&lt;p&gt;In this section you&amp;rsquo;ll find a number of different Angular version 2 and above applications which should provide good examples of the concepts covered in the course above:&lt;/p&gt;

&lt;h2 id=&#34;angular-admin-dashboard&#34;&gt;Angular Admin Dashboard&lt;/h2&gt;

&lt;div class=&#34;github-link&#34;&gt;&lt;a href=&#34;https://github.com/elliotforbes/angular-2-admin&#34;&gt;Angular 2.2 Admin Dashboard Repo&lt;/a&gt;&lt;/div&gt;

&lt;h4 id=&#34;screenshot&#34;&gt;Screenshot&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/elliotforbes/angular-2-admin/raw/master/screenshot.png?raw=true&#34; alt=&#34;Angular 2 Admin Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This project features a fleshed out Angular 2.2 admin dashboard.&lt;/p&gt;

&lt;h4 id=&#34;features&#34;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Angular Router with sub-routes contained in sub-modules&lt;/li&gt;
&lt;li&gt;Markdown editor using Marked&lt;/li&gt;
&lt;li&gt;Built using angular-cli&lt;/li&gt;
&lt;li&gt;Examples of Services, Observables, Modules and Sub Modules&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ng-chat-an-angular-2-websocket-chat&#34;&gt;Ng-Chat - An Angular 2 Websocket Chat&lt;/h2&gt;

&lt;div class=&#34;github-link&#34;&gt;&lt;a href=&#34;https://github.com/elliotforbes/ng-chat&#34;&gt;Angular 2 Websocket Chat Project&lt;/a&gt;&lt;/div&gt;

&lt;h4 id=&#34;features-1&#34;&gt;Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;RxJS Observables&lt;/li&gt;
&lt;li&gt;Websocket Service that interacts with a live websocket server.&lt;/li&gt;
&lt;li&gt;A Markdown based chat application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;screenshot-1&#34;&gt;Screenshot:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/elliotforbes/ng-chat/raw/master/screenshot.png?raw=true&#34; alt=&#34;Ng-chat&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Fundamentals</title>
      <link>https://tutorialedge.net/course/angularjs/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://tutorialedge.net/course/angularjs/</guid>
      <description>

&lt;p&gt;AngularJS is a web framework designed and built by Google for the main purpose of building web apps. It provides automatic 2 way data-binding and eliminates the need to manually manipulate the DOM. This is exceptionally useful as it allows developers to focus purely on the business logic behind their applications as opposed to tedious boilerplate code.&lt;/p&gt;

&lt;p&gt;The models that angularjs uses are plain old javascript objects, this again makes it far easier to test, maintain and reuse.&lt;/p&gt;

&lt;p&gt;Overall it’s a hugely popular framework that has seen a huge rise in adoption in financial institutions and tech companies due to its relative ease of use and the power that it brings to the table.&lt;/p&gt;

&lt;h2 id=&#34;who-is-this-course-for&#34;&gt;Who is this Course For?&lt;/h2&gt;

&lt;p&gt;This course is designed to take someone that has knowledge of Javascript and set them on the right path to creating their own web applications.&lt;/p&gt;

&lt;p&gt;You will require:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Text Editor - I recommend Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;course-content&#34;&gt;Course Content&lt;/h2&gt;

&lt;p&gt;In this course I&amp;rsquo;ll be demonstrating the absolute fundamentals to developing applications with AngularJS 1.X. We&amp;rsquo;ll begin by creating a very simple admin application that will perform multiple tasks such as consuming RESTful APIs, Lazy Loading articles and more.&lt;/p&gt;

&lt;p&gt;We’ll begin by creating some very simple Single Page Applications or SPAs and then build up on these until we’ve covered everything you need in order to develop your own web applications using the AngularJS framework.&lt;/p&gt;

&lt;h4 id=&#34;things-we-ll-cover&#34;&gt;Things We’ll Cover&lt;/h4&gt;

&lt;p&gt;Through this course we’ll be covering the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expressions&lt;/li&gt;
&lt;li&gt;Form Input&lt;/li&gt;
&lt;li&gt;Http Requests&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Factories&lt;/li&gt;
&lt;li&gt;Services&lt;/li&gt;
&lt;li&gt;Controllers&lt;/li&gt;
&lt;li&gt;Directives&lt;/li&gt;
&lt;li&gt;And more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scope-and-scope-inheritance&#34;&gt;Scope and Scope Inheritance&lt;/h2&gt;

&lt;p&gt;Scopes are what allow us to manipulate data in the backend controller and have that data reflected instantaneously in the frontend. Scopes provide APIs which what any objects we define and then when they detect changes, they propogate these changes through the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-data-binding-tutorial&#34;&gt;AngularJS Data Binding Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-ng-if-child-scopes&#34;&gt;AngularJS ng-if child scopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;controllers&#34;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;Controllers are what we typically use to define our web application’s behavior. They should be used to manipulate our $scope objects and pull all of our applications together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-controllers-tutorial&#34;&gt;AngularJS Controllers Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;directives&#34;&gt;Directives&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;At a high level, directives are markers on a DOM element (such as an attribute, element name, comment or CSS class) that tell AngularJS&amp;rsquo;s HTML compiler ($compile) to attach a specified behavior to that DOM element (e.g. via event listeners), or even to transform the DOM element and its children.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this section we&amp;rsquo;ll look at how we can build our own directives using AngularJS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-directives-tutorial&#34;&gt;AngularJS Directives Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;event-handling&#34;&gt;Event Handling&lt;/h2&gt;

&lt;p&gt;One of the best features of AngularJS is the fact it abstracts away from you all the complex event handling code that you would typically deal with using other frameworks such as JQuery. In this section of the course we look at the numerous ways you can easily handle events in your AngularJS Applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-event-handling-tutorial&#34;&gt;AngularJS Event Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;forms&#34;&gt;Forms&lt;/h2&gt;

&lt;p&gt;In this section we&amp;rsquo;ll be looking at how we can effectively work with forms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-form-validation-tutorial&#34;&gt;AngularJS Form Validation Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;filters&#34;&gt;Filters&lt;/h2&gt;

&lt;p&gt;By definition filters select a subset of items from an array and returns it as a new array. For front-end applications this can be a very powerful tool that helps us to manipulate the data we&amp;rsquo;ve got into a format that suits our needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-filter-tutorials&#34;&gt;AngularJS Filter Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-filter-search-tutorial&#34;&gt;AngularJS Filter Search Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;http&#34;&gt;$http&lt;/h2&gt;

&lt;p&gt;Here we&amp;rsquo;ll look at how you can utilize AngularJS&amp;rsquo;s $http Service in order to communicate with servers and REST APIs using the browsers XMLHttpRequest object or JSONP.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-http-service-apis&#34;&gt;AngularJS $http Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;factories-and-services&#34;&gt;Factories and Services&lt;/h2&gt;

&lt;p&gt;In this section we&amp;rsquo;ll examine how to create and use AngularJS Factories and Services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-factory-tutorial&#34;&gt;AngularJS Factory Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;routing&#34;&gt;Routing&lt;/h2&gt;

&lt;p&gt;AngularJS&amp;rsquo;s routing functionality gives us the ability to have a single master page in which we dynamically load in the necessary views that we need. In this section we&amp;rsquo;ll explore the power of the ng-view directive and the $routeProvider service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-template-tutorial-ng-view&#34;&gt;AngularJS Templating Tutorial using ng-view Directive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An interesting problem that comes up with regards to routing is how to pass data between route changes. Say for instance you want to pass form submission data to the next stage of an application, one of the best and easiest ways to do this is using a storage service. In this tutorial we look at exactly how we can implement this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/passing-data-between-routes-angularjs&#34;&gt;Passing Data Between Routes in AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;angularjs-promises&#34;&gt;AngularJS Promises&lt;/h2&gt;

&lt;p&gt;In this section of the course we look at how we can effectively use AngularJS&amp;rsquo;s $q promise service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-promises-tutorial&#34;&gt;AngularJS Promises Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;The structure you choose for your project is hugely important. Having a clear, easy to follow structure from the get go can help you to no end further down the line. In this section of the course we look at the just how you should structure your angularjs applications so that they can be easily maintained and extended.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/angularjs-project-structure-tutorial&#34;&gt;AngularJS Project Structure Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working-with-angularjs-component-based-applications&#34;&gt;Working with AngularJS Component Based Applications&lt;/h2&gt;

&lt;p&gt;In this section of the course we look at how you can effectively work with an extend angularjs applications that follow a component based architecture. We see how to define our own component, controller and any necessary routes needed for a new page within an existing application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/working-with-angularjs-component-applications&#34;&gt;Effectively Working with Component Based AngularJS Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;automating-your-angularjs-workflow-with-gulp&#34;&gt;Automating Your AngularJS Workflow with Gulp&lt;/h2&gt;

&lt;p&gt;This section of the course looks at the build tools we can use to make our life a little easier as AngularJS devs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/automating-angularjs-workflow-with-gulp&#34;&gt;Automating your AngularJS Workflow with Gulp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscellaneous-tutorials&#34;&gt;Miscellaneous Tutorials&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/removing-duplicates-ng-repeat-angularjs&#34;&gt;AngularJS Removing Duplicates from an Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Artificial Intelligence</title>
      <link>https://tutorialedge.net/course/artificial-intelligence/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://tutorialedge.net/course/artificial-intelligence/</guid>
      <description>&lt;p&gt;Artificial intelligence is a field that has interested me since the days that I started programming. It’s hard not to see the appeal of having a computer program that could effectively think for itself and perform automated tasks based off a series of events. It’s a field that has been highly utilized by the gaming industry in order to create NPC characters that think for themselves and ultimately create far more interesting games with longer replay-ability. &lt;/p&gt;

&lt;p&gt;Being able to create a game that challenges you in different ways every time you play it guarantees you a longer shelf life that if you were to create something predictable that can be beaten easily by learning a few patterns.&lt;/p&gt;

&lt;h2&gt;Course Introduction&lt;/h2&gt;

&lt;p&gt;Over this course I’m aiming to introduce you to key strategies used by game developers when implementing Artificial Intelligence systems into their own games. I’ll be covering popular algorithms such as the A* search algorithm, breadth first, depth first,  Alpha-beta pruning and more and hopefully give you a good grounding of the basics of artificial intelligence.&lt;/p&gt;

&lt;p&gt;I’m going to start of by introducing concepts such as agents and rationality and then build up to implementing a number of highly-used Artificial Intelligence algorithms. &lt;/p&gt;

&lt;h2&gt;Course Structure&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/an-intro-to-artificial-intelligence&#34;&gt;An Introduction to Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/what-is-an-intelligent-agent&#34;&gt;What is an Intelligent Agent?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/breadth-first-search-with-java&#34;&gt;Breadth First Searching Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/depth-first-search-in-java&#34;&gt;Depth First Searching Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorialedge.net/depth-limited-search-in-java&#34;&gt;Depth Limited Searching Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://tutorialedge.net/course/golang/</link>
      <pubDate>Fri, 14 Apr 2017 20:27:58 +0100</pubDate>
      
      <guid>https://tutorialedge.net/course/golang/</guid>
      <description>

&lt;h2 id=&#34;what-is-go&#34;&gt;What is Go?&lt;/h2&gt;

&lt;p&gt;Go is an incredible language to learn if you want to develop incredibly fast and reliable systems. As of the 10th of November 2016 it passed it&amp;rsquo;s 7th birthday and it continues to build pace within the programming ecosystem.&lt;/p&gt;

&lt;h2 id=&#34;features-of-the-language&#34;&gt;Features of the Language&lt;/h2&gt;

&lt;p&gt;The language itself is open source and incredibly powerful, with features like concurrency built into the language it&amp;rsquo;s an excellent candidate for some of the tools I plan to build in 2016.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expressive&lt;/li&gt;
&lt;li&gt;Efficient&lt;/li&gt;
&lt;li&gt;Statically Typed&lt;/li&gt;
&lt;li&gt;Compiled&lt;/li&gt;
&lt;li&gt;Features Garbage Collection&lt;/li&gt;
&lt;li&gt;Compiles Exceptionally Quickly into Machine Code&lt;/li&gt;
&lt;li&gt;Run-time reflection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;In order to start writing your own Go based systems you&amp;rsquo;ll need to install it on your local machine: &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Download Go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>