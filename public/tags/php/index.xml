<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on TutorialEdge.net</title>
    <link>/tags/php/index.xml</link>
    <description>Recent content in Php on TutorialEdge.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Simple Laravel 5 Pagination</title>
      <link>/post/php/laravel/simple-laravel-pagination/</link>
      <pubDate>Sat, 15 Apr 2017 14:42:47 +0100</pubDate>
      
      <guid>/post/php/laravel/simple-laravel-pagination/</guid>
      <description>&lt;p&gt;Pagination is a way of splitting up content into several different pages and making content layout far more organized. A must for blogs who wish their front-pages to be small enough to load and yet big enough to showcase the most important tutorials.&lt;/p&gt;

&lt;h2&gt;Modifying the Controller:&lt;/h2&gt;

&lt;p&gt;Pagination in Laravel 5 is incredibly easy to implement. In this tutorial I will be using some of the code from this site to serve as an example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Old Method - No Pagination:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
class ArticleController extends Controller {
    public function index()
    {
        $articles = Article::get();
        return view(&#39;someview&#39;, compact(&#39;articles&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;New Way : With Pagination&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
class ArticleController extends Controller {
    public function index()
    {
        $articles = Article::paginate(15);
        return view(&#39;someview&#39;, compact(&#39;articles&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Modifying the View&lt;/h2&gt;

&lt;p&gt;So now that we&#39;ve modified the controller we need to then modify the view ever so slightly in order to allow for our pagination. In this example I was printing out key details about my articles in a table and wanted the results to be split up instead of having huge lists of posts to wade through:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;@foreach ($articles as $article)

    {{ $article-&amp;gt;id }}
    {{ $article-&amp;gt;title }}
    {{ $article-&amp;gt;published }}

@endforeach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the newly added pagination this works fine, but we have no current way to navigate between pages of rows. So in order for us to fix that we add the following wrapped in php tags:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php echo $articles-&amp;gt;render(); ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating an Admin Area with Laravel 5</title>
      <link>/post/php/laravel/creating-an-admin-area-laravel/</link>
      <pubDate>Sat, 15 Apr 2017 09:35:37 +0100</pubDate>
      
      <guid>/post/php/laravel/creating-an-admin-area-laravel/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This tutorial assumes prior knowledge of Laravel 5. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Adding a new Column to Users Table&lt;/h2&gt;

&lt;p&gt;In order for this authentication to work, we are going to need to have a column that lets us distinguish between either admins or regular users. In this case I chose to extend the pre-existing users table by adding an integer column to the schema. Once you&#39;ve added this rollback and then migrate so that you have access to this new column.&lt;/p&gt;

&lt;h2&gt;Using Middleware&lt;/h2&gt;

&lt;p&gt;Laravel 5&#39;s new middleware mechanism offers an exceptionally easy way to authenticate users and thus create an admin backend to manage any web apps. HTTP middleware provide a convenient mechanism for filtering HTTP requests entering your application, by utilizing these filters we can determine if the user is both logged in and features the correct access levels required to access the sensitive backend of our site. If the user requesting access to the backend of the site is not authenticated, the middleware redirects the user to the login screen. &lt;/p&gt;

&lt;h3&gt;Creating our AdminMiddleware&lt;/h3&gt;

&lt;p&gt;Open up your terminal and type the following in your projects root folder. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan make:middleware AdminMiddleware
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will contain the code that will authenticate our user and ensure that they have the appropriate access levels.&lt;/p&gt;

&lt;h3&gt;Adding Middleware to Kernel.php&lt;/h3&gt;

&lt;p&gt;Once we&#39;ve created our new AdminMiddleware we need to assign the middleware a short-hand key by opening up Kernel.php under App &gt; Http and add the following line to your protected $routeMiddleware array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
  /**
  * The application&#39;s route middleware.
  *
  * @var array
  */
  protected $routeMiddleware = [
    &#39;auth&#39; =&amp;gt; &#39;App\Http\Middleware\Authenticate&#39;,
    &#39;auth.basic&#39; =&amp;gt; &#39;Illuminate\Auth\Middleware\AuthenticateWithBasicAuth&#39;,
    &#39;guest&#39; =&amp;gt; &#39;App\Http\Middleware\RedirectIfAuthenticated&#39;,
        # LINE TO BE ADDED HERE:
        &#39;admin&#39; =&amp;gt; &#39;App\Http\Middleware\AdminMiddleware&#39;,
  ];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Utilizing our Middleware in our Route Options:&lt;/h3&gt;

&lt;p&gt;Now that we&#39;ve created our middleware and assigned it a short-hand key in our kernel.php file we can start using it in our Routes.php file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Route::get(&#39;admin&#39;, [&#39;middleware&#39; =&amp;gt; &#39;admin&#39;, &#39;uses&#39; =&amp;gt; &#39;AdminController@index&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Updating our AdminController&lt;/h2&gt;

&lt;p&gt;Our AdminController&#39;s index function mentioned in the route above will look something like this to return the index page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Support\Facades\Auth;
use Log;

class Authenticate
{
  /**
    * Handle an incoming request.
    *
    * @param  \Illuminate\Http\Request  $request
    * @param  \Closure  $next
    * @param  string|null  $guard
    * @return mixed
    */
  public function handle($request, Closure $next, $guard = null)
  {
    Log::info(&amp;quot;Authenticating Users...&amp;quot;);
    if (Auth::guard($guard)-&amp;gt;guest()) {
      if ($request-&amp;gt;ajax() || $request-&amp;gt;wantsJson()) {
        Log::info(&amp;quot;Unauthorized ajax request.&amp;quot;);
        return response(&#39;Unauthorized.&#39;, 401);
      } else {
        Log::info(&amp;quot;Redirecting to login page.&amp;quot;);
        return redirect()-&amp;gt;guest(&#39;/auth/github&#39;);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Testing it Works&lt;/h3&gt;

&lt;p&gt;Now that you&#39;ve set up your AdminController correctly and applied the AdminMiddleware to your &#39;admin&#39; route, you should see that you are redirected back to the login screen should you happen to not be authenticated. This was just a quick and easy way to create an admin backend that only specific user groups can access, however if you believe there is a better way then please let me know in the comments section below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Laravel 5 Simple Site Search Bar Tutorial</title>
      <link>/post/php/laravel/laravel-5-simple-site-search-bar/</link>
      <pubDate>Sat, 15 Apr 2017 09:26:20 +0100</pubDate>
      
      <guid>/post/php/laravel/laravel-5-simple-site-search-bar/</guid>
      <description>&lt;p&gt;Something that I’ve been working on recently on the site is the search bar functionality which allows people to effectively search every through every article on the site to find one that will help them the most. In this tutorial I’ll be documenting a few of the ways that you can implement a simple full site search using Laravel 5.&lt;/p&gt;

&lt;h2&gt;Requirements&lt;/h2&gt;

&lt;p&gt;In order to complete this tutorial you&#39;ll have to set up your laravel 5 project to use the form facade. Add this to your composer.json file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;quot;require&amp;quot;: {
    &amp;quot;laravelcollective/html&amp;quot;: &amp;quot;~5.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run the following composer command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we have to add it to our both the aliases array and the providers array found in config/app.php&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;providers&#39; =&amp;gt; [
    ....
    &#39;Collective\Html\HtmlServiceProvider&#39;,
    ....
 ],


&#39;aliases&#39; =&amp;gt; [
    ....
    &#39;Form&#39; =&amp;gt; &#39;Collective\Html\FormFacade&#39;,
    &#39;Html&#39; =&amp;gt; &#39;Collective\Html\HtmlFacade&#39;,
    ....
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating the Form&lt;/h2&gt;

&lt;p&gt;To get things started we are going to need to create a form that will allow us to input our searches. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;{!! Form::open(array(&#39;rout&#39; =&amp;gt; &#39;queries.search&#39;, &#39;class&#39;=&amp;gt;&#39;form navbar-form navbar-right searchform&#39;)) !!}
    {!! Form::text(&#39;search&#39;, null,
                           array(&#39;required&#39;,
                                &#39;class&#39;=&amp;gt;&#39;form-control&#39;,
                                &#39;placeholder&#39;=&amp;gt;&#39;Search for a tutorial...&#39;)) !!}
     {!! Form::submit(&#39;Search&#39;,
                                array(&#39;class&#39;=&amp;gt;&#39;btn btn-default&#39;)) !!}
 {!! Form::close() !!}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Creating our Routes:&lt;/h2&gt;

&lt;p&gt;The way I’ve implemented the search function route in my project is to use a Route resource as I’m going to be storing the queries further down the line in order to get suggestions for new articles. Open up your routes.php file and add the following route:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::resource(&#39;queries&#39;, &#39;QueryController&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding Search Functionality to our QueryController&lt;/h2&gt;

&lt;p&gt;So now we’ve created a form and updated our routes.php file we can add the search functionality to our controller. Create a new function that takes in a Request and call it search, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function search(Request $request)
{
  // Gets the query string from our form submission 
  $query = Request::input(&#39;search&#39;);
  // Returns an array of articles that have the query string located somewhere within 
  // our articles titles. Paginates them so we can break up lots of search results.
  $articles = DB::table(&#39;articles&#39;)-&amp;gt;where(&#39;title&#39;, &#39;LIKE&#39;, &#39;%&#39; . $query . &#39;%&#39;)-&amp;gt;paginate(10);
      
  // returns a view and passes the view the list of articles and the original query.
  return view(&#39;page.search&#39;, compact(&#39;articles&#39;, &#39;query&#39;));
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s all we need for very simplistic search functionality but now we need to be able to see these results.&lt;/p&gt;

&lt;h2&gt;Creating our Search blade Template&lt;/h2&gt;

&lt;p&gt;We’ve already set up our routes so but currently it doesn’t have a template it can use so we’ll implement that now. Create a new folder within your resources/views folder called page and then create search.blade.php within that folder. This will be the template that will be used whenever we want to list our results. I’m going to assume you’ve got an app.blade.php already implemented with sections for content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@if (count($articles) === 0)
... html showing no articles found
@elseif (count($articles) &amp;gt;= 1)
... print out results
    @foreach($articles as $article)
    print article
    @endforeach
@endif
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That should be everything you need for a simple full site search with laravel 5. If you feel I’ve missed anything or require further explanations then please let me know in the comments section below!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Laravel 5.1 Routes Cheat Sheet</title>
      <link>/post/php/laravel/laravel-routes-cheat-sheet/</link>
      <pubDate>Sat, 15 Apr 2017 09:22:16 +0100</pubDate>
      
      <guid>/post/php/laravel/laravel-routes-cheat-sheet/</guid>
      <description>&lt;h2&gt;Static Pages:&lt;/h2&gt;

&lt;p&gt;Static pages are just simple pages that don’t necessarily change too much. A good example of pages that would typically fall under this umbrella are your About and Contact us pages. These routes point back to views that have already been created in your resources/views folder. I.e resources/views/contact.blade.php would be the file for our contact view returned below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(‘/contact’, function() 
{
    return view(‘contact’);
});

Route::get(‘/about’, function()
{
    return view(‘about’);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that these have worked by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan route:list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were to open up your app and navigate to http://localhost:8000/about you should see your about.blade.php file rendered in full.&lt;/p&gt;

&lt;h2&gt;Route Prefixes:&lt;/h2&gt;

&lt;p&gt;A good way to create certain sections of your site such as a video section in which the uri would look something like this: http://localhost:8000/videos/latestvideo would be to use route prefixes like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;as&#39; =&amp;gt; &#39;videos::&#39;, &#39;prefix&#39; =&amp;gt; &#39;videos&#39;], function () {
   Route::get(‘latestvideo’, [&#39;as&#39; =&amp;gt; &#39;latestvideo&#39;, function () {
       return &amp;quot;super amazing latest video&amp;quot;;
   }]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Route Groups:&lt;/h2&gt;

&lt;p&gt;Route groups are an great way to create different sections of your site such as admin sections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;as&#39; =&amp;gt; &#39;admin::&#39;, &#39;prefix&#39; =&amp;gt; &#39;admin&#39;], function () {
   Route::get(&#39;dashboard&#39;, [&#39;as&#39; =&amp;gt; &#39;dashboard&#39;, function () {
       return &amp;quot;hello&amp;quot;;
   }]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you navigate to admin/dashboard then you should be able to see hello printed out in the browser. Of course you can change this to point to another view if you desired.&lt;/p&gt;

&lt;h3&gt;Adding more routes to a Group&lt;/h3&gt;

&lt;p&gt;Adding more routes to a route group is as simple as placing them within the group array like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;as&#39; =&amp;gt; &#39;admin::&#39;, &#39;prefix&#39; =&amp;gt; &#39;admin&#39;], function () {
   Route::get(&#39;dashboard&#39;, [&#39;as&#39; =&amp;gt; &#39;dashboard&#39;, function () {
       return &amp;quot;hello&amp;quot;;
   }]);
   
   Route::get(&#39;users&#39;, [&#39;as&#39;=&amp;gt;&#39;users&#39;, function() {
       return &amp;quot;users&amp;quot;;
   }]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Adding Middleware to Groups:&lt;/h2&gt;

&lt;p&gt;Say for instance we wanted to create an admin only section of the site. We’d want to create a filter that wouldn’t allow any unauthorised access to the admin section. We can do that like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::group([&#39;as&#39; =&amp;gt; &#39;admin::&#39;, &#39;prefix&#39; =&amp;gt; &#39;admin&#39;, &#39;middleware&#39;=&amp;gt;&#39;auth&#39;], function () {
   Route::get(&#39;dashboard&#39;, [&#39;as&#39; =&amp;gt; &#39;dashboard&#39;, function () {
       return &amp;quot;hello&amp;quot;;
   }]);
   
   Route::get(&#39;users&#39;, [&#39;as&#39;=&amp;gt;&#39;users&#39;, function() {
       return &amp;quot;users&amp;quot;;
   }]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice if you call php artisan route:list now you should see the auth middleware applied to both admin/dashboard and admin/users. You’ll have to create your own auth/login and auth/register views within Laravel 5.1 as these have been removed in the latest version.&lt;/p&gt;

&lt;h2&gt;Custom 404 Route:&lt;/h2&gt;

&lt;p&gt;Laravel 5.1 takes care of 404 errors for you so all you have to do is to create your custom 404 page: resources/views/errors/404.blade.php and the rest is handled for you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Laravel 5 Middleware Tutorial</title>
      <link>/post/php/laravel/laravel-5-middleware-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:20:55 +0100</pubDate>
      
      <guid>/post/php/laravel/laravel-5-middleware-tutorial/</guid>
      <description>&lt;p&gt;This tutorial serves as a more expanded introduction to Laravel 5.1’s middleware than that of the documentation. I’ll be exploring a more expanded ins-and-outs of the middleware part of the framework.&lt;/p&gt;

&lt;h2&gt;What is Middleware?&lt;/h2&gt;

&lt;p&gt;Every site on the planet basically has to deal with loads of different requests on a daily basis, from the standard GET request which basically asks for resources such as web pages or files to the PUT and DELETE requests which allow you to upload and delete things depending on the scenario.&lt;/p&gt;

&lt;p&gt;But say you implemented something on your site that allowed you to upload new articles, how would you protect it from loads of people randomly uploading garbage to the site? Well that’s where Laravel 5’s middleware comes in. Middleware is basically a filtering mechanism that allows you to filter out all the bad requests and only deal with the good ones.&lt;/p&gt;

&lt;p&gt;This is brilliant for those of you who want to do things like rate-limiting on APIs that you want to build or if you wanted to build something like an advertisement provider that needs to provide ads based off location etc.&lt;/p&gt;

&lt;h2&gt;Creating Middleware&lt;/h2&gt;

&lt;p&gt;We can easily create new middleware using artisan.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan make:middleware AdMiddleware
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we’ve created a new middleware component, we then need to look at modifying the code to suit our needs.&lt;/p&gt;

&lt;h2&gt;Updating our Middleware File:&lt;/h2&gt;

&lt;p&gt;After you’ve ran the make:middleware command you should see your new middleware file in app/http/middleware. Open this up and we’ll create a middleware that will get the request’s IP address and then determine what country that request came from.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php 
namespace App\Http\Middleware;
use Closure;
class AdMiddleware
{
  /**
    * Handle an incoming request.
    *
    * @param  \Illuminate\Http\Request  $request
    * @param  \Closure  $next
    * @return mixed
    */
  public function handle($request, Closure $next)
  {
    // Test to see if the requesters have an ip address.
    if($request-&amp;gt;ip() == null){
        throw new \Exception(&amp;quot;IP ADDRESS NOT SET&amp;quot;);   
    } 
    $country=file_get_contents(&#39;http://api.hostip.info/get_html.php?ip=&#39; . $request-&amp;gt;ip());
    echo $country;
    if(strpos($country, &amp;quot;UNITED STATES&amp;quot;)){
        throw new \Exception(&amp;quot;NOT FOR YOUR EYES, NSA&amp;quot;);   
    } else {
        return redirect(&amp;quot;index&amp;quot;);   
    }
    
    return $next($request);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code basically takes in a request and as an example checks to see it’s location before deciding whether to display a US only ad or an advertisement suited for the rest of the world.
This could be quite beneficial for those of you who want to build up a site that features amazon affiliate links from multiple countries.&lt;/p&gt;

&lt;p&gt;Note that you shouldn&#39;t be passing anything back in the middleware section, you should instead be passing redirects to views instead of printing out things like I&#39;ve done for brevity.&lt;/p&gt;

&lt;h2&gt;Registering your Middleware&lt;/h2&gt;

&lt;p&gt;When registering your middleware you have 2 choices. First choice is that you add the middleware to be run on every request handled by your app. You can do that by opening up App\Http\Kernel.php and adding it to your $middleware array like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;protected $middleware = [
  \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
  \App\Http\Middleware\EncryptCookies::class,
  \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
  \Illuminate\Session\Middleware\StartSession::class,
  \Illuminate\View\Middleware\ShareErrorsFromSession::class,
  \App\Http\Middleware\VerifyCsrfToken::class,
// our new class.
  \App\http\Middleware\AdMiddleware::class,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second choice is to have the middleware run on registered routes only, you can register it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php
/**
  * The application&#39;s route middleware.
  *
  * @var array
  */
protected $routeMiddleware = [
    &#39;auth&#39; =&amp;gt; \App\Http\Middleware\Authenticate::class,
    &#39;auth.basic&#39; =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
    &#39;guest&#39; =&amp;gt; \App\Http\Middleware\RedirectIfAuthenticated::class,
    &#39;ad&#39; =&amp;gt; \App\Http\Middleware\AdMiddleware::class,
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then add the middleware to the specific routes like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/ip&#39;, [&#39;middleware&#39; =&amp;gt; &#39;ad&#39;, function() {
    return &amp;quot;IP&amp;quot;;
}]);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adding Github Registry and Authentication To Laravel 5.2</title>
      <link>/post/php/laravel/adding-github-oauth-to-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:27:49 +0100</pubDate>
      
      <guid>/post/php/laravel/adding-github-oauth-to-laravel-5-2/</guid>
      <description>&lt;p&gt;As part of the ongoing work I’ve been doing on this site, I thought it would be a good idea to totally remove the traditional method of registering and logging in and instead replace that with github authentication. This actively reduces the risks that the site takes with regards to storing passwords and allows me to rely upon a relatively secure authentication method rather than having to roll my own.&lt;/p&gt;

&lt;h2&gt;Creating a Github Application&lt;/h2&gt;

&lt;p&gt;In order for us to use Github’s authentication in our application we are going to need to first register this with Github. Navigate to &lt;a href=”https://github.com/settings/applications/new”&gt;here&lt;/a&gt; and fill in the details for your new application. &lt;/p&gt;

&lt;p&gt;The callback url should be http://yourapp.com/auth/github/callback &lt;/p&gt;

&lt;p&gt;Once you’ve done that you should be redirected to a page that shows you the client ID and the secret. Copy these and add them to your .env file in your laravel 5 application: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GITHUB_ID=abcd12345
GITHUB_SECRET=abcdefg1234567
GITHUB_CALLBACK_URL=https://yourapp.com/auth/github/callback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next thing we need to do is add this to our config/services.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;github&#39; =&amp;gt; [
      &#39;client_id&#39; =&amp;gt; env(&#39;GITHUB_ID&#39;),
      &#39;client_secret&#39; =&amp;gt; env(&#39;GITHUB_SECRET&#39;),
      &#39;redirect&#39; =&amp;gt; env(&#39;GITHUB_CALLBACK_URL&#39;),  
  ],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After you’ve done this we should be good to go and can proceed with installing Socialite and configuring our app.&lt;/p&gt;

&lt;h2&gt;Adding Socialite To Your Laravel 5 Project&lt;/h2&gt;

&lt;p&gt;In order for us to use Github’s authentication we are going to need to first add Socialite to our Laravel 5 project. We can do this by performing the following composer command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer require laravel/socialite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this has successfully ran we then need to make some modifications to our config/app.php file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;providers&#39; =&amp;gt; [
		…
  // add our new provider to the providers array 
  &#39;Laravel\Socialite\SocialiteServiceProvider&#39;,
],
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;aliases&#39; =&amp;gt; [
  &#39;Socialite&#39; =&amp;gt; &#39;Laravel\Socialite\Facades\Socialite&#39;,
],
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuring our Routes&lt;/h2&gt;

&lt;p&gt;In order for visitors to authenticate with github we are going to need a new route that they can navigate to that will trigger out authentication prompt. Navigate to your routes.php file and add the following routes: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Route::get(&#39;auth/github&#39;, &#39;Auth\AuthController@redirectToProvider&#39;);
Route::get(&#39;auth/github/callback&#39;, &#39;Auth\AuthController@handleProviderCallback&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve added these two routes, we now need to add the functions that they call whenever they are hit.&lt;/p&gt;

&lt;h2&gt;Our AuthController File&lt;/h2&gt;

&lt;p&gt;Open up your AuthController.php file and add the following 3 functions: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php    
/**
  * Redirect the user to the GitHub authentication page.
  *
  * @return Response
  */
public function redirectToProvider(Request $request)
{
    return Socialite::driver(&#39;github&#39;)
        -&amp;gt;with([&#39;redirect_uri&#39; =&amp;gt; env(&#39;GITHUB_CALLBACK_URL&#39; ) . &#39;?redirect=&#39; . $request-&amp;gt;input(&#39;redirect&#39;)])
        -&amp;gt;redirect();
}

/**
  * Obtain the user information from GitHub.
  *
  * @return Response
  */
public function handleProviderCallback(Request $request)
{
    $user = Socialite::driver(&#39;github&#39;)-&amp;gt;user();
    Session::put(&#39;user&#39;, $user);

    $redirect = $request-&amp;gt;input(&#39;redirect&#39;);
    
    if($redirect)
    {
        return redirect($redirect);
    }
    
    $authUser = $this-&amp;gt;findOrCreateUser($user);

    Auth::login($authUser, true);
            
    return redirect(&#39;home&#39;);
}

/**
  * Return user if exists; create and return if doesn&#39;t
  *
  * @param $githubUser
  * @return User
  */
private function findOrCreateUser($githubUser)
{
    if ($authUser = User::where(&#39;github_id&#39;, $githubUser-&amp;gt;id)-&amp;gt;first()) {
        Log::info(&amp;quot;User Found&amp;quot;);
        Auth::login($authUser);
        return $authUser;
    }

    return User::create([
        &#39;name&#39; =&amp;gt; $githubUser-&amp;gt;name,
        &#39;email&#39; =&amp;gt; $githubUser-&amp;gt;email,
        &#39;github_id&#39; =&amp;gt; $githubUser-&amp;gt;id,
        &#39;avatar&#39; =&amp;gt; $githubUser-&amp;gt;avatar
    ]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Editing the Database Structure&lt;/h2&gt;

&lt;p&gt;So if we are going to be authenticating people using Github’s OAuth2 then we need to be able to store who we have and haven’t already authenticated. To do this we’ll need to modify the database so that it stores the github_id and any subsequent things like the avatar etc. &lt;/p&gt;

&lt;p&gt;In this example I just extended my users table by adding an extra row, I prefer doing it using pure sql rather than migrations:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Pure SQL&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ALTER TABLE users ADD github_id INT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Updating our Users Model&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Finally we need to update our User model. Open up app/User.php and change the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
* The attributes that are mass assignable.
*
* @var array
*/
protected $fillable = [&#39;github_id&#39;,&#39;name&#39;, &#39;email&#39;, &#39;password&#39;];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Testing it All Works&lt;/h2&gt;

&lt;p&gt;Now that you’ve configured everything it’s time to check it all works. Navigate to http://yourapp.com/auth/github and you should hopefully be redirected to githubs authentication page on which you can allow your app to use your details. This should then return you to your ‘home’ route or whatever other route you wish to route them back to. &lt;/p&gt;

&lt;p&gt;If everything works then congratulations, you’ve now succesfully added github authentication to your Laravel application! &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building A Blog With Laravel 5.2</title>
      <link>/post/php/laravel/building-a-blog-with-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:21:41 +0100</pubDate>
      
      <guid>/post/php/laravel/building-a-blog-with-laravel-5-2/</guid>
      <description>&lt;p&gt;In this series we’ll be building a fully functioning blog using the Laravel 5.2 framework. We’ll iteratively build up our own content management system from the ground up and I’ll focus on demonstrating the best practices and by the end of this you’ll have a solid base for whatever projects you have in the pipeline.&lt;/p&gt;

&lt;h2&gt;Creating our Project&lt;/h2&gt;

&lt;p.In order to create our project we’ll first need to install composer and laravel. The official docs have an excellent guide as to how you can install everything on your local machine which you can find here: &lt;a target=”_blank” href=&#34;https://laravel.com/docs/5.1/installation&#34;&gt;Laravel 5.1 Installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve installed and configured your environment it’s time to begin. Create the new project by creating a new directory on your machine and then typing the following in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;composer create-project laravel/laravel blog &#34;5.1.*&#34;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Testing it all works:&lt;/h2&gt;

&lt;p&gt;Ensure that you set the correct permissions on the storage and bootstrap/cache directories within your new project. You can do this on mac easily by typing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;chmod -R 777 bootstrap/cache
chmod -R 777 storage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Running our Laravel project Locally:&lt;/h2&gt;

&lt;p&gt;Now that all permission have been set up you can now serve up your application by typing the following in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;php artisan serve --port=8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:8080&#34; target=&#34;_blank&#34;&gt;http://localhost:8080&lt;/a&gt; in your browser and, should everything have been set up correctly, you should see the laravel 5 default page.&lt;/p&gt;

&lt;h2&gt;Next Lesson&lt;/h2&gt;

&lt;p&gt;In the next lesson of this course, I will be demonstrating how we can create some basic tables using migrations.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Link:&lt;/b&gt; &lt;a href=&#34;https://tutorialedge.net/working-with-tables-laravel-5-2&#34;&gt;Lesson 2 - Working With Tables&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Cipher and or Key Length are Invalid - laravel 5.2 Issue</title>
      <link>/post/php/laravel/cipher-keylength-invalid-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:08:41 +0100</pubDate>
      
      <guid>/post/php/laravel/cipher-keylength-invalid-laravel-5-2/</guid>
      <description>&lt;p&gt;One of the issues you may face with a new laravel 5.2 installation is where the Cipher and or Keylength is invalid.&lt;/p&gt;

&lt;h2&gt;Resolving the Issue&lt;/h2&gt;

&lt;p&gt;Resolving the issue is relatively simple using php artisan, first ensure you have a .env file in the root of your project and then type the following in the command line: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan key:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should generate a key for you in square brackets. Copy this and paste the following into your .env file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;APP_KEY=base64:yourkeygoeshere
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Checking it works:&lt;/h2&gt;

&lt;p&gt;Once you’ve successfully set this, try navigating to your laravel application and you should see the welcome page. Check the logs by typing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tail -100f storage/log/laravel.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this doesn’t change the next time you render a page then you have successfully resolved the issue.&lt;/p&gt;

&lt;h2&gt;The Stack Trace&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;production.ERROR: exception &#39;RuntimeException&#39; with message &#39;No supported encrypter found. The cipher and / or key length are invalid.&#39; in /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Encryption/EncryptionServiceProvider.php:45
Stack trace:
#0 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Encryption/EncryptionServiceProvider.php(25): Illuminate\Encryption\EncryptionServiceProvider-&amp;gt;getEncrypterForKeyAndCipher(NULL, &#39;AES-256-CBC&#39;)
#1 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(735): Illuminate\Encryption\EncryptionServiceProvider-&amp;gt;Illuminate\Encryption\{closure}(Object(Illuminate\Foundation\Application), Array)
#2 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(633): Illuminate\Container\Container-&amp;gt;build(Object(Closure), Array)
#3 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(697): Illuminate\Container\Container-&amp;gt;make(&#39;encrypter&#39;, Array)
#4 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(853): Illuminate\Foundation\Application-&amp;gt;make(&#39;Illuminate\\Cont...&#39;)
#5 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(808): Illuminate\Container\Container-&amp;gt;resolveClass(Object(ReflectionParameter))
#6 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(779): Illuminate\Container\Container-&amp;gt;getDependencies(Array, Array)
#7 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Container/Container.php(633): Illuminate\Container\Container-&amp;gt;build(&#39;App\\Http\\Middle...&#39;, Array)
#8 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Application.php(697): Illuminate\Container\Container-&amp;gt;make(&#39;App\\Http\\Middle...&#39;, Array)
#9 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(126): Illuminate\Foundation\Application-&amp;gt;make(&#39;App\\Http\\Middle...&#39;)
#10 [internal function]: Illuminate\Pipeline\Pipeline-&amp;gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#11 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Pipeline.php(32): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#12 [internal function]: Illuminate\Routing\Pipeline-&amp;gt;Illuminate\Routing\{closure}(Object(Illuminate\Http\Request))
#13 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(103): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#14 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Router.php(726): Illuminate\Pipeline\Pipeline-&amp;gt;then(Object(Closure))
#15 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Router.php(699): Illuminate\Routing\Router-&amp;gt;runRouteWithinStack(Object(Illuminate\Routing\Route), Object(Illuminate\Http\Request))
#16 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Router.php(675): Illuminate\Routing\Router-&amp;gt;dispatchToRoute(Object(Illuminate\Http\Request))
#17 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(246): Illuminate\Routing\Router-&amp;gt;dispatch(Object(Illuminate\Http\Request))
#18 [internal function]: Illuminate\Foundation\Http\Kernel-&amp;gt;Illuminate\Foundation\Http\{closure}(Object(Illuminate\Http\Request))
#19 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Pipeline.php(52): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#20 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/CheckForMaintenanceMode.php(44): Illuminate\Routing\Pipeline-&amp;gt;Illuminate\Routing\{closure}(Object(Illuminate\Http\Request))
#21 [internal function]: Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode-&amp;gt;handle(Object(Illuminate\Http\Request), Object(Closure))
#22 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(136): call_user_func_array(Array, Array)
#23 [internal function]: Illuminate\Pipeline\Pipeline-&amp;gt;Illuminate\Pipeline\{closure}(Object(Illuminate\Http\Request))
#24 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Routing/Pipeline.php(32): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#25 [internal function]: Illuminate\Routing\Pipeline-&amp;gt;Illuminate\Routing\{closure}(Object(Illuminate\Http\Request))
#26 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(103): call_user_func(Object(Closure), Object(Illuminate\Http\Request))
#27 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(132): Illuminate\Pipeline\Pipeline-&amp;gt;then(Object(Closure))
#28 /Users/elliotforbes/Documents/Projects/PersonalSite/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(99): Illuminate\Foundation\Http\Kernel-&amp;gt;sendRequestThroughRouter(Object(Illuminate\Http\Request))
#29 /Users/elliotforbes/Documents/Projects/PersonalSite/public/index.php(54): Illuminate\Foundation\Http\Kernel-&amp;gt;handle(Object(Illuminate\Http\Request))
#30 /Users/elliotforbes/Documents/Projects/PersonalSite/server.php(21): require_once(&#39;/Users/elliotfo...&#39;)
#31 {main}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Introduction To Routing in Laravel 5.2</title>
      <link>/post/php/laravel/introduction-to-routing-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:07:02 +0100</pubDate>
      
      <guid>/post/php/laravel/introduction-to-routing-laravel-5-2/</guid>
      <description>&lt;p&gt;This tutorial is part 2 of the &lt;a target=”_blank” href=&#34;https://tutorialedge.net/course/laravel-5&#34;&gt;Building a Blog with Laravel 5.2&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;Ok, so we left off with an very simple, working Laravel 5.2 installation. When we run this using php artisan serve, we should see the Laravel welcome page when we navigate to http://localhost:8000/. Now that we’ve got that ready, it’s time to start playing about with routing and some basic views.&lt;/p&gt;

&lt;h2&gt;The Plan&lt;/h2&gt;

&lt;p&gt;Before we get started, we need some sort of plan that we can work against. So we need to think what our blog needs in order to be a successful blog.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;A Home page :&lt;/b&gt; This will be where visitors will land upon when they first visit the blog. This needs to have good navigation to all other sections of our site and should tell the visitors exactly who we are and what we do. Because I’m redo-ing my personal blog in this tutorial, I want it to showcase some of the projects I’ve worked on in recent years and I want it to link nicely to the blog section of the site.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The Blog Main Page :&lt;/b&gt; This is where we will list all of our articles.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog Single Page :&lt;/b&gt; This will be the page that displays all of our articles. Any changes we make here will be reflected across all blog posts, this makes it very powerful as we just have to maintain one single page for everything.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Contact page : &lt;/b&gt; This is where I’m going to put all my contact details and social media links etc for getting in touch. &lt;/p&gt;

&lt;h2&gt;Our First Route&lt;/h2&gt;

&lt;p&gt;Now that I’ve got a very simple plan of what I want on my blog, we can start creating the routes in which we want to display things. We’ll start with the home page route, open up &lt;b&gt;routes.php&lt;/b&gt; under the &lt;b&gt;app/Http&lt;/b&gt; directory and you should see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It&#39;s a breeze. Simply tell Laravel the URIs it should respond to
| and give it the controller to call when that URI is requested.
|
*/

Route::get(&#39;/&#39;, function () {
    return view(&#39;welcome&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this does is provides us with a very simple route that returns our &lt;b&gt;welcome.blade.php&lt;/b&gt; as a view to the browser whenever a &lt;b&gt;GET&lt;/b&gt; request is performed for &lt;b&gt;http://localhost:8000/&lt;/b&gt; or the homepage of wherever you are hosting your application.&lt;/p&gt;

&lt;p&gt;This is the type of functionality I want for the home page of my blog but I don’t want it pointing to the &lt;b&gt;welcome.blade.php&lt;/b&gt; file. Instead I want it pointing to my own &lt;b&gt;index.blade.php&lt;/b&gt; that I’m going to define under &lt;b&gt;resources/views&lt;/b&gt;. So create this new &lt;b&gt;index.blade.php&lt;/b&gt; file under this directory and also create another blade template called &lt;b&gt;app.blade.php&lt;/b&gt;. This app.blade.php file will act as our master page for our entire site and will handle such things as the head section of our website and the footer. This is so that we don’t have to constantly change it in every file that uses a header or footer and it’s less code to maintain.&lt;/p&gt;

&lt;h2&gt;Our Blade Template&lt;/h2&gt;

&lt;p&gt;In order for us to get up and running quickly we’ll be creating some very simple blade templates that we can use in our blog. Feel free to expand upon these later on once you are comfortable.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;app.blade.php&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;ElliotForbes.co.uk&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        
        &amp;lt;h2&amp;gt;Our Nav Goes here&amp;lt;/h2&amp;gt;
        
        @yield(&#39;content&#39;)        
        
        &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
            &amp;lt;h2&amp;gt;Our Footer Stuff Goes here&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
        
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;index.blade.php&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@extends(&#39;app&#39;)

@section(&#39;content&#39;)
&amp;lt;h2&amp;gt;Home Page&amp;lt;/h2&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, nothing overly complicated here. Anything we want reflected in all pages of our site we put in our app.blade.php file. Page-specific content goes within their own blade files.&lt;/p&gt;

&lt;h2&gt;Some Basic Routes&lt;/h2&gt;

&lt;p&gt;So now that we’ve got our &lt;b&gt;app.blade.php&lt;/b&gt; and our &lt;b&gt;index.blade.php&lt;/b&gt; files we can now define our route for the homepage.&lt;/p&gt;

&lt;p&gt;Open up &lt;b&gt;routes.php&lt;/b&gt; within &lt;b&gt;app/Http&lt;/b&gt; and we are going to change the route for our ‘/’ page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/&#39;, function () {
    // change this to return our index blade template rather than the defaul
    // welcome template
    return view(&#39;index&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now navigate to your app in the browser you will now see your newly created index file rather than the old welcome page. Now that we’ve got the basics down, we can create the blade template for our contact and about pages and the routes to them. Below you’ll find an example of how we can create the route for our contact page.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;Route::get(&#39;/blog&#39;, function () {
    return view(&#39;blog-home&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the &lt;b&gt;blog-home.blade.php&lt;/b&gt; blade template in the same directory as your &lt;b&gt;index.blade.php&lt;/b&gt; and then navigate to your &lt;b&gt;http://localhost:8000/blog&lt;/b&gt; and you should see your newly created blog template rendered in all it’s glory. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective Debugging of Laravel 5.2 Applications</title>
      <link>/post/php/laravel/effective-debugging-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:05:46 +0100</pubDate>
      
      <guid>/post/php/laravel/effective-debugging-laravel-5-2/</guid>
      <description>&lt;p&gt;Knowing how to effectively debug problems with your laravel 5.2 application is vital if you are to combat problems and reduce the amount of errors within your application.&lt;/p&gt;

&lt;p&gt;Below you’ll find an array of different methods you can use either one their own or in any combination in order to fight against the dreaded bugs that might be turning potential customers away.&lt;/p&gt;

&lt;h2&gt;Using Log and tail -f&lt;/h2&gt;

&lt;p&gt;This happens to be one of my favourite and potentially most effective methods of debugging my applications. In production environments where you should hide all error output from visitors, using Log is one way to trap this information for analysis further down the line.&lt;/p&gt;

&lt;p&gt;Below you’ll find a simple implementation of a controller that utilizes the Log function to log a message every time that function is hit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
// Notice we’ve added this line here to import Log
use Log;

class TestlController extends Controller
{
    //
    public function test()
    {
        Log::info(&amp;quot;This will print to the logs&amp;quot;);
        return &amp;quot;done&amp;quot;;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you create a route using this test function and hit this route, you should see the a new line with a timestamp and the message “this will print to the logs” appended to &lt;b&gt;storage/logs/laravel.log&lt;/b&gt; every time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;tail -f&lt;/b&gt;: tail -100f log.log is one of the best ways to watch logs, all it does is print out the last 100 lines of our log.log file. Typically fresh laravel 5.2 applications will output to &lt;b&gt;storage/log/laravel.log&lt;/b&gt; so the command &lt;b&gt;tail -100f storage/log/laravel.log&lt;/b&gt; executed from your project’s root directory should work straight out the box.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Controllers in Laravel 5.2</title>
      <link>/post/php/laravel/getting-started-with-controllers-laravel-5-2/</link>
      <pubDate>Sat, 15 Apr 2017 08:04:33 +0100</pubDate>
      
      <guid>/post/php/laravel/getting-started-with-controllers-laravel-5-2/</guid>
      <description>&lt;p&gt;This tutorial is part of the &lt;a href=&#34;https://tutorialedge.net/course/laravel-5&#34;&gt;Build a blog with Laravel 5.2&lt;/a&gt; course.&lt;/p&gt;

&lt;h2&gt;What are Controllers?&lt;/h2&gt;

&lt;p&gt;Laravel follows the model-view-controller software architectural pattern. We’ve already played about with views in Laravel which constitute the ‘V’ in an MVC architecture but if we wanted to do anything fancy like query a database or process user input then we are going to need to create a &lt;b&gt;controller&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Controllers : &lt;/b&gt;The formal definition of controllers is something that accepts input and then converts this for commands for the model or view. In laravel this tends to be accepting things like form input and returning blade templates as well as retrieving data from the database. You should as a rule try to ensure the View layer of your application does not contain any logic and remains as just a method of displaying data processed by the controller.&lt;/p&gt;

&lt;p&gt;So initially we don’t require a model to complete the MVC architecture as all we are going to be doing is returning a view to the user. We’ll come to models further into this course when we start building the blog section of our site.&lt;/p&gt;

&lt;h2&gt;Creating a Controller in Laravel 5.2&lt;/h2&gt;

&lt;p&gt;Thanks to the &lt;b&gt;php artisan&lt;/b&gt; it’s incredibly easy for us to create a new controller in Laravel 5.2. As we will be building a blog, I want the name of this controller to be &lt;b&gt;BlogController&lt;/b&gt;. So open up your command line and navigate to the root of your project. Once there type the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan make:controller BlogController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create a new controller for us under &lt;b&gt;app/Http/Controllers&lt;/b&gt;. Open this up and you should see the following: &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;

class BlogController extends Controller
{
    //    
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have this we can go into our BlogController class definition and create a few functions. As we don’t yet have a model in place we want to just return a few static pages back to anyone who visits our site. &lt;/p&gt;

&lt;h2&gt;Adding our Blade Templates&lt;/h2&gt;

&lt;p&gt;Ok, so initially we are going to have a homepage which displays all blog posts, an about page, a contact page and a single page which will display a single blog post.&lt;/p&gt;

&lt;p&gt;Each of these will need to have their own blade view within our &lt;b&gt;resources/views&lt;/b&gt; directory. For now these are going to be really simple and they are going to extend our app.blade.php master page that we created in the previous tutorial:&lt;/p&gt;

&lt;h6&gt;single.blade.php&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@extends(&#39;app&#39;)

@section(&#39;content&#39;)
&amp;lt;h2&amp;gt;Single Page&amp;lt;/h2&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;h6&gt;index.blade.php&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@extends(&#39;app&#39;)

@section(&#39;content&#39;)
&amp;lt;h2&amp;gt;Single Page&amp;lt;/h2&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;h6&gt;about.blade.php&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@extends(&#39;app&#39;)

@section(&#39;content&#39;)
&amp;lt;h2&amp;gt;About Page&amp;lt;/h2&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;h6&gt;contact.blade.php&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;@extends(&#39;app&#39;)

@section(&#39;content&#39;)
&amp;lt;h2&amp;gt;Contact Page&amp;lt;/h2&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Returning our Blade Templates&lt;/h2&gt;
&lt;p&gt;Now that we’ve got something to return we can add the new functions to our BlogController class that will return our views to the frontend:&lt;/p&gt;

~~~
public function index()
{
    return view(&#39;index&#39;);
}

public function single()
{
    return view(&#39;single&#39;);
}
    
public function about()
{
    return view(&#39;about&#39;);
}

public function contact()
{
    return view(&#39;contact&#39;);
}
~~~

&lt;h2&gt;Updating our Routes.php File&lt;/h2&gt;

&lt;p&gt;And finally, now that we’ve created our blade templates and added the appropriate functions to our BlogController we can now update our Routes.php file to use this new controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It&#39;s a breeze. Simply tell Laravel the URIs it should respond to
| and give it the controller to call when that URI is requested.
|
*/

Route::get(&#39;/&#39;, &#39;BlogController@index&#39;);

/*
 * Our Static pages
 */
Route::get(&#39;/about&#39;, &#39;BlogController@about&#39;);
Route::get(&#39;/contact&#39;, &#39;BlogController@contact&#39;);

/*
 * The Routes for all our Blog pages.
 * Note that this is placed after our /about and /contact
 * routes to avoid conflict
 */
Route::get(&#39;/{slug}&#39;, &#39;BlogController@single&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Testing it All Works&lt;/h2&gt;

&lt;p&gt;Once you’ve saved all this, navigate to your browser and open up your application. Test out navigating to different pages and checking that everything works. &lt;/p&gt;

&lt;p&gt;If it has, &lt;b&gt;Congratulations!&lt;/b&gt; You have successfully completed create a static site using Laravel 5.2&lt;/p&gt;

&lt;p&gt;In the next tutorial I’m going to be introducing the concept of &lt;b&gt;models&lt;/b&gt; and how to turn our static site into a &lt;b&gt;dynamic&lt;/b&gt; website that will automatically change based off what is in the database.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working With Tables in Laravel 5.2</title>
      <link>/post/php/laravel/working-with-tables/</link>
      <pubDate>Sat, 15 Apr 2017 08:01:33 +0100</pubDate>
      
      <guid>/post/php/laravel/working-with-tables/</guid>
      <description>&lt;h2&gt;Pre-Requisites&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;Before we can get started&lt;/b&gt; building our blog, we&#39;ll first need to set up a database on our machine that we can play around with for testing purposes.&lt;/p&gt;

&lt;p&gt;I typically use XAMPP on my local machines as it allows me to create MySQL tables using phpMyAdmin. I&#39;d recommend, if you haven&#39;t already, downloading this and setting it up.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Once you&#39;ve set up phpMyAdmin&lt;/b&gt; create a table with which we can build our blog. Create a user and give that user permission and then add this to your &lt;b&gt;.env&lt;/b&gt; file within the root directory of your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;DB_HOST=127.0.0.1
DB_DATABASE=blog_db
DB_USERNAME=your_user
DB_PASSWORD=your_password&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test this connection out by performing &lt;b&gt;php artisan migrate&lt;/b&gt; and if everything is configured correctly you should now see a users table within that database.&lt;/p&gt;

&lt;h2&gt;Creating our Database Tables:&lt;/h2&gt;

&lt;p&gt;Over these tutorials we will be implementing the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Blog System with Tags&lt;/li&gt;
&lt;li&gt;A commenting system so that users can respond to our posts.&lt;/li&gt;
&lt;li&gt;User authentication using Facebook, Twitter and Google Plus&lt;/li&gt;
&lt;li&gt;An Admin Section where we can perform all CRUD on our posts.&lt;/li&gt;
&lt;li&gt;An API that we can consume and utilize for future components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each of these things we’ll want to define some form of schema that can be used to store our data in our database. I’m purposefully leaving a few fields out of the initial design as it’ll let me demonstrate the power of migrations further down the line.&lt;/p&gt;

&lt;h3&gt;Posts&lt;/h3&gt;

&lt;table class=&#34;striped&#34;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
              &lt;th data-field=&#34;id&#34;&gt;Name&lt;/th&gt;
              &lt;th data-field=&#34;name&#34;&gt;Type&lt;/th&gt;
              &lt;th data-field=&#34;price&#34;&gt;Traits&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;

        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;id&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;unique, increments&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;Title&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;description&lt;/td&gt;
            &lt;td&gt;text&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Author&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Body&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;published_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

&lt;h3&gt;Comments&lt;/h3&gt;

&lt;table class=&#34;striped&#34;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
              &lt;th data-field=&#34;id&#34;&gt;Name&lt;/th&gt;
              &lt;th data-field=&#34;name&#34;&gt;Type&lt;/th&gt;
              &lt;th data-field=&#34;price&#34;&gt;Traits&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;

        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;id&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;unique, increments&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;body&lt;/td&gt;
            &lt;td&gt;text&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;author&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;published_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;Tags&lt;/h3&gt;

&lt;table class=&#34;striped&#34;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
              &lt;th data-field=&#34;id&#34;&gt;Name&lt;/th&gt;
              &lt;th data-field=&#34;name&#34;&gt;Type&lt;/th&gt;
              &lt;th data-field=&#34;price&#34;&gt;Traits&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;

        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;id&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;unique, increments&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;name&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Post_Tag&lt;/h3&gt;

&lt;table class=&#34;striped&#34;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
              &lt;th data-field=&#34;id&#34;&gt;Name&lt;/th&gt;
              &lt;th data-field=&#34;name&#34;&gt;Type&lt;/th&gt;
              &lt;th data-field=&#34;price&#34;&gt;Traits&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;

        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;post_id&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;tag_id&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
          &lt;/tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updated_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Creating our Migrations&lt;/h2&gt;

&lt;p&gt;php artisan again comes in useful when creating migrations. For each of the tables we’ve defined above, we are going to want to create a migration that will create a table in the database.&lt;/p&gt;

&lt;p&gt;Navigate to the root directory of the project and type the following commands in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=”language-markup”&gt;php artisan make:migration create_posts_table&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=”language-markup”&gt;php artisan make:migration create_comments_table&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=”language-markup”&gt;php artisan make:migration create_tags_table&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=”language-markup”&gt;php artisan make:migration create_post_tag_table&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create 4 new php classes under &lt;b&gt;database/migrations&lt;/b&gt; and it’s in these 4 new files that we are going to define our tables schema.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Defining our Schemas&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;In each of these 4 new files we need to define the table structure for all of our tables. You’ll notice that the users table has already been defined for us.&lt;/p&gt;

&lt;p&gt;If you open up the CreatePostsTable class that will have been created from the first php artisan command then you should see something like the code below. The only difference is I&#39;ve added the basic create and drop table functionality in the up and down methods. Migration classes like the one below contain 2 functions, an up function and a down function. The up function creates tables and the down function typically does the reverse.&lt;/p&gt;

&lt;p&gt;In this tutorial we&#39;ll be using &lt;b&gt;Laravel&#39;s Schema Builder&lt;/b&gt; in order to elegantly craft the tables we need in our database. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&lt;xmp&gt;&lt;?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePostsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;posts&#39;, function (Blueprint $table){
           // our schema is defined in here 
           $table-&gt;increments(&#39;id&#39;);
           $table-&gt;string(&#39;title&#39;);
           $table-&gt;text(&#39;description&#39;);
           $table-&gt;text(&#39;body&#39;);
           $table-&gt;string(&#39;author&#39;);
           $table-&gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        // here we define what happens when we bring down our application
        // in this case we want to drop our posts table
        Schema::drop(&#39;posts&#39;);
    }
}&lt;/xmp&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;For the purpose of brevity&lt;/b&gt;, I&#39;m only going to be showing you the up functions for the next 3 tables we&#39;ll be creating.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&lt;xmp&gt;public function up()
    {
        Schema::create(&#39;comments&#39;, function (Blueprint $table){
           // our schema is defined in here 
           $table-&gt;increments(&#39;id&#39;);
           $table-&gt;integer(&#39;post_id&#39;);
           $table-&gt;text(&#39;body&#39;);
           $table-&gt;string(&#39;author&#39;);
           $table-&gt;timestamps();
        });
    }&lt;/xmp&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function up()
    {
        Schema::create(&#39;tags&#39;, function (Blueprint $table) {
            $table-&gt;increments(&#39;id&#39;);
            $table-&gt;string(&#39;name&#39;);
            $table-&gt;timestamps();
        });
    }&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;public function up()
    {
        Schema::create(&#39;post_tag&#39;, function (Blueprint $table){
            $table-&gt;integer(&#39;post_id&#39;)-&gt;unsigned()-&gt;index();
            $table-&gt;integer(&#39;tag_id&#39;)-&gt;unsigned()-&gt;index();
            $table-&gt;timestamps(); 
        }); 
        
        // This sets up the relationships for our table
        Schema::table(&#39;post_tag&#39;, function ($table){
            $table-&gt;foreign(&#39;post_id&#39;)-&gt;references(&#39;id&#39;)-&gt;on(&#39;posts&#39;)-&gt;onDelete(&#39;cascade&#39;);
            $table-&gt;foreign(&#39;tag_id&#39;)-&gt;references(&#39;id&#39;)-&gt;on(&#39;tags&#39;)-&gt;onDelete(&#39;cascade&#39;); 
        });
    }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once these are in place and you have successfully set up a database for your test site, perform the following command in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markup&#34;&gt;php artisan migrate&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;If everything went smoothly with our migrations then you should have in place everything we need to start building our blog.&lt;/p&gt; 

&lt;p&gt;In the next lesson I&#39;m going to be demonstrating how to implement some basic routes in Laravel 5.2&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Link:&lt;/b&gt; &lt;a href=&#34;https://tutorialedge.net/creating-some-routes-laravel-5&#34;&gt;Lesson 3 - Creating some Basic Routes&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working With Models in Laravel 5.2</title>
      <link>/post/php/laravel/working-with-models-laravel-5-2/</link>
      <pubDate>Sun, 09 Apr 2017 21:34:10 +0100</pubDate>
      
      <guid>/post/php/laravel/working-with-models-laravel-5-2/</guid>
      <description>&lt;p&gt;This tutorial is part of the &lt;a href=&#34;https://tutorialedge.net/course/laravel-5&#34;&gt;Building a blog with Laravel 5.2&lt;/a&gt; course.&lt;/p&gt;

&lt;h2&gt;Working with Models&lt;/h2&gt;

&lt;p&gt;In a traditional MVC architecture, the model is where all the data, rules and logic for an application are written. The same concept applies to Laravel 5.2 applications.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;In this tutorial&lt;/b&gt; I’m going to be showing you how we can create and work with some basic models in our new blog.&lt;/p&gt;

&lt;h2&gt;Why Do We Need Models?&lt;/h2&gt;

&lt;p&gt;Model’s are incredibly powerful in Laravel as they allow us to do things like define relationships. Say for instance you had a post on your blog and you wanted to link comments to that post, in Laravel it’s incredibly easy to define this relationship within a Model. You’ll see how we can define this Post -&gt; Comment relationship further into the tutorial series.&lt;/p&gt;

&lt;h2&gt;Creating a Model&lt;/h2&gt;

&lt;p&gt;Again we are going to be utilizing &lt;b&gt;php artisan&lt;/b&gt; in order to create a new model. For the blog we are building, we want to create a Post model that will interact with our posts database. &lt;/p&gt;

&lt;p&gt;Now this is where Laravel shows it’s power, by simply creating a posts database table and then a Post model, Laravel will behind the scenes link these two things together without any added configuration.&lt;/p&gt;

&lt;p&gt;Navigate to the root directory of your project and type the following in the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php artisan make:model Post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create a new Post.php class under your &lt;b&gt;app&lt;/b&gt; directory.&lt;/p&gt;

&lt;h2&gt;Under Construction&lt;/h2&gt;

&lt;p&gt;This series is still undergoing construction. Stay tuned for more updates.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>