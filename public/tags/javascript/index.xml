<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on TutorialEdge.net</title>
    <link>/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on TutorialEdge.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AngularJS Promises Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-promises-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 14:41:31 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-promises-tutorial/</guid>
      <description>

&lt;p&gt;In this tutorial we&amp;rsquo;ll be looking at how to work with and define promises in AngularJS. For more information check out the official &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$q&#34;&gt;AngularJS Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-are-promises-in-javascript&#34;&gt;What are Promises in Javascript?&lt;/h2&gt;

&lt;p&gt;Essentially when you create a promise, you are ensuring that a certain order is followed in the execution of your code. Javascript is asynchronous by nature and in the execution of a method it’s not guaranteed what part of it will finish execution first. This is a big change if you are used to languages like Java and C++ where the order of execution is always exactly the same.&lt;/p&gt;

&lt;h2 id=&#34;example-of-a-promise&#34;&gt;Example of a Promise&lt;/h2&gt;

&lt;p&gt;If you have written any AngularJS applications that call upon the $http service then you will have already had experience working with Promises. For example this is a promise:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// We create our promise
$http.get(‘api/status’)
    // that once complete will call either our success callback function
    // or our error callback function
    .then(function success(response) {
        // handle our response object
        $log.log(response);
    }, function error(response) {
        // handle our error
        $log.log(“Error Thrown”);
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is essentially what all promises look like in javascript, we create the promise and pass it two &lt;em&gt;callback&lt;/em&gt; functions. A good analogy to describe this is as follows:&lt;/p&gt;

&lt;p&gt;Say you were cooking a meal
You delegate the task of cutting the onions to another person and say, let me know when this is done.
Whilst this other person is working on cutting the onions, you are free to carry on working on the carrots.
When the other person is done with the onions, they let you know and you can either add the onions to the stew if they were cut the right way, or throw them in the bin and try again.&lt;/p&gt;

&lt;p&gt;This is also a good example of one of the main benefits to Javascript asynchronous design, the thread executing the code isn’t held up and can carry on doing other things whilst it waits for the results of the promise.&lt;/p&gt;

&lt;p&gt;In code terms the above flow would look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$http.get(&#39;api/cut/onions&#39;)
  .then(function success(response){
    // add them to the stew
  }, function error(response){
    // these onions were bad,
    // throw them away
  });

// continue cutting carrots whilst you wait for the promise to finish executing
cutCarrots();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However this is also an example of how things can go wrong in your applications, for instance. Because we don’t have any control over when a promise will finish, we could see weird side-effects from our code. For instance we could see the onions added to the stew before the carrots which might not be what we want.&lt;/p&gt;

&lt;h2 id=&#34;chaining-promises&#34;&gt;Chaining Promises&lt;/h2&gt;

&lt;p&gt;Thankfully, we have a way we can dictate when we want things done. This is where the $q service comes in. If we wanted to maintain the order in which things happen in the preparation of our stew we could do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// first chop our onions
$http.get(&#39;api/chop/onions&#39;)
  .then(function success(response){
    // once that is done chop our carrots
    return $http.get(&#39;api/chop/carrots&#39;);
  })
  .then(function success(response){
    // once the carrots are done, add both to the stew
    return $http.get(&#39;api/add/onionsAndCarrots&#39;);
  })
  .then(function success(response){
    // serve our stew
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;defining-our-own-promises&#34;&gt;Defining our Own Promises&lt;/h2&gt;

&lt;p&gt;AngularJS&amp;rsquo;s $q service allows to define our own promises. Below you&amp;rsquo;ll find an example controller that contains the ctrl.ourPromise function, this function returns a promise object that we can chain like we have done in our ctrl.$onInit function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function TestController($q, $log){
  var ctrl = this;
  // our $onInit function shows exactly how we can
  // chain our newly defined promise object
  ctrl.$onInit = function() {
    ctrl.ourPromise()
      .then(function success(){
        $log.log(&amp;quot;Our Promise has finished&amp;quot;);
      });
  };
  // we define our promise object and return it in
  // this function
  ctrl.ourPromise = function(){
    var defer = $q.defer();

    $log.log(&amp;quot;Do all of our stuff in here&amp;quot;);

    return defer.promise;
  };

};

TestController.$inject = [&#39;$q&#39;, &#39;$log&#39;];

angular.module(&#39;root&#39;)
  .controller(&#39;TestController&#39;, TestController);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you spot any errors with this tutorial or wish to ask any further questions then let me know in the comments section below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Most Important Changes to AngularJS in 1.6</title>
      <link>/post/javascript/angularjs/most-important-changes-angularjs-1-6/</link>
      <pubDate>Sat, 15 Apr 2017 14:31:36 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/most-important-changes-angularjs-1-6/</guid>
      <description>

&lt;div class=&#34;github-link&#34;&gt;The changelog with the AngularJS 1.6 release notes can be found here: &lt;a href=&#34;https://github.com/angular/angular.js/blob/master/CHANGELOG.md&#34;&gt;AngularJS 1.6-RC.0&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;After having a look at the AngularJS release notes for 1.6, I thought I’d compile my thoughts together as to the most important changes to the framework in the coming release.&lt;/p&gt;

&lt;h2 id=&#34;expression-sandbox-removal&#34;&gt;Expression Sandbox Removal&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.co.uk/2016/09/angular-16-expression-sandbox-removal.html&#34;&gt;Expression Sandbox Removal Full Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The expression sandbox removal was essentially something that checked to see if your code was accidentally accessing arbitrary javascript and discourage you from placing any business logic inside your templates.&lt;/p&gt;

&lt;p&gt;The expression sandbox was intended to be a security feature but exploits continued to be found regardless of the number of patches put out. Thus the Angular team decided to out and out remove the feature and to place to onus of securing applications on the developers using Angular.&lt;/p&gt;

&lt;p&gt;This will help to speed up the framework as a whole and is ultimately a good thing,if you are developing a full stack app then you need to consider security at all levels of your application.&lt;/p&gt;

&lt;h2 id=&#34;http-success-error-callback-methods-deprecated&#34;&gt;$http Success/Error Callback Methods Deprecated&lt;/h2&gt;

&lt;p&gt;Regardless of the fact this was considered bad practice in Angular 1.5, you may still have some of these sprawled about your codebase, in 1.6 this callback function will be entirely removed and you will be forced to use the better practice for making http requests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this is the old way
$http.get(‘oauth/clients’)
    .success(function onSuccess(response){
        // use response
    })
    .error(function onError(response){
        // use error
    });


// this is the new way
$http.get(&#39;oauth/clients&#39;)
      .then(function success(response){
        $log.log(response.data);
      })
      .catch(function error(response){
        $log.log(response);
        $log.log(response.status);
        $log.log(response.headers);
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: the response object returned is different, if you are trying to access the data of your response, just append .data and you should see the new content.&lt;/p&gt;

&lt;h2 id=&#34;changes-to-ngmodel&#34;&gt;Changes to ngModel&lt;/h2&gt;

&lt;p&gt;There have been some notable changes to ngModel, for instance you are no longer able to methods to $scope.$watch without some form of context. This essentially means you’ll have to wrap things in a function like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// old way with no context passed
$scope.$watch(&#39;something&#39;, myNgModelCtrl.$render);
// new way with context
$scope.$watch(&#39;something&#39;, function() {
  myNgModelCtrl.$render();
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updates-to-jqlite&#34;&gt;Updates to jqLite&lt;/h2&gt;

&lt;p&gt;I don’t typically use jqLite in my day to day coding but there were multiple breaking changes to this featured in the changelog, if you do tend to use this then I’d recommend you check out the changelog for more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS ng-model in ng-if Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:17:38 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-ng-model-in-ng-if-tutorial/</guid>
      <description>&lt;p&gt;a quick tip for those trying to get the ng-model directive working in your angularjs application within ng-if.&lt;/p&gt;

&lt;h2&gt;ng-if Child Scopes&lt;/h2&gt;

&lt;p&gt;If you are wanting to use an ng-model scope within an ng-if then you&#39;ll have to access that scope using $parent&lt;/p&gt;

&lt;p&gt;Our html page will look something like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;div ng-if=&amp;quot;isFalse&amp;quot;&amp;gt;
        {{$parent.name}}
    &amp;lt;/div&amp;gt;
    
    &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt;
    
    &amp;lt;div ng-if=&amp;quot;isTrue&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;{{$parent.name}}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our controller looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope) {
    
    $scope.isTrue = false;
    
    $scope.name = &amp;quot;Elliot&amp;quot;;
    
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Data Binding Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-data-binding-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:16:16 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-data-binding-tutorial/</guid>
      <description>

&lt;p&gt;AngularJS Official Docs on Data Binding can be found here: &lt;a href=&#34;https://docs.angularjs.org/guide/databinding&#34;&gt;AngularJS Data Binding&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
Please note that the use of scope is somewhat frowned upon. Check out my article on &lt;a href=&#34;https://tutorialedge.net/working-with-angularjs-component-applications&#34;&gt;Working with Components&lt;/a&gt; and how you should use one way data-binding.
&lt;/div&gt;

&lt;h2&gt;What is Data Binding?&lt;/h2&gt;

&lt;p&gt;Data binding is incredibly useful due to the fact it automatically synchronizes the data in both our model and view components. Any changes made to something in the frontend will automatically be reflected in the backend and vice versa. This essentially means we no longer have to worry about complex DOM manipulation and traversal.&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How Does it Work?&lt;/h2&gt;

&lt;p&gt;AngularJS utilizes it&amp;rsquo;s own mechanism very similar to Dirty Checking. Essentially AngularJS iterates through a list of variables and checks to see whether or not the value of that variable has changed. If a variable has changed then it goes and performs the DOM manipulation required.&lt;/p&gt;

&lt;h4 id=&#34;performance-issues&#34;&gt;Performance Issues&lt;/h4&gt;

&lt;p&gt;It must be noted that once you get to about 2000 variables that you have to consistently watch you might start seeing noticeable differences in your apps performance. If you are dealing with incredibly complex sets of data then try and limit the amount of variables that you have consistently being watched and possibly break it down these sets into subsets which can be viewed on different pages.&lt;/p&gt;

&lt;h2&gt;How Do We Implement It?&lt;/h2&gt;

&lt;p&gt;Thanks to the hard work of the AngularJS team, data binding is incredibly simple to implement in your own applications. To demonstrate this we’ll start with a very basic application that allows us to dynamically change a name based off of an input box’s input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;div&amp;gt;
       &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;name&amp;quot; /&amp;gt;
        {{name}}
    &amp;lt;/div&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope) {
    
    $scope.name = &amp;quot;Elliot&amp;quot;;
    
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output for this small example can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tutorialedge.net/uploads/databinding.gif&#34; alt=&#34;angularjs data binding&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Controllers Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-controllers-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:10:12 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-controllers-tutorial/</guid>
      <description>&lt;p&gt;AngularJS controllers are somewhat similar to classes in Object Oriented programming and as such you can define the functionality of your applications in these controllers. When a controller is attached to the DOM via the ng-controller directive it instantiates a new Controller object.&lt;/p&gt;

&lt;div class=&#34;note&#34;&gt;
Check out my article on &lt;a href=&#34;https://tutorialedge.net/working-with-angularjs-component-applications&#34;&gt;Working with Components&lt;/a&gt; and see how you should use controllers within a component based system.
&lt;/div&gt;

&lt;h2&gt;Instantiating a Controller&lt;/h2&gt;

&lt;p&gt;We’ll begin by creating a very simple controller that contains a function that we’ll call every time we click a button. We’ll also have a $scope variable that we will bind to somewhere on our HTML page so that we can see the effects of this function’s execution every time it is pressed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope) {
    
    $scope.myNumber = 1;
    
    $scope.go = function() {
        $scope.myNumber = $scope.myNumber + 1;
        console.log(&amp;quot;hit&amp;quot;);
    };
    
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve defined our controller, we need to create our button that will be able to call our newly defined function within our controller, we can do that like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;div&amp;gt;
        {{myNumber}}
        &amp;lt;!--
            by using the ng-click directive we can call the function 
            go() that we&#39;ve declared in our testController.
        --&amp;gt;
        &amp;lt;button ng-click=&amp;quot;go()&amp;quot;&amp;gt;Add One!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice we’ve that we’ve added the ng-controller directive to our body html tag and added the name of our controller in there as well as added the ng-app directive to our outermost html tags. These two things are essential if we want this to run.&lt;/p&gt;

&lt;h2&gt;Scope Inheritance&lt;/h2&gt;

&lt;p&gt;One very useful thing to note is that we can effectively achieve scope inheritance due to the fact each new ng-controller instantiation creates a new child scope. This essentially allows us to access scope variables declared higher up in the hierarchy and this can be quite useful if you are wanting to achieve less code duplication etc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope) {
    
    $scope.myNumber = 1;
    
    $scope.go = function() {
        $scope.myNumber = $scope.myNumber + 1;
        console.log(&amp;quot;hit&amp;quot;);
    };
    
});

testApp.controller(&#39;childTestController&#39;, function($scope) {
    $scope.yourNumber = 99;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;div&amp;gt;
        {{myNumber}}
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div ng-controller=&amp;quot;childTestController&amp;quot;&amp;gt;
        {{yourNumber}}
    &amp;lt;/div&amp;gt;
    
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Templating Tutorial Using ng-view</title>
      <link>/post/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</link>
      <pubDate>Sat, 15 Apr 2017 09:09:12 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-template-tutorial-using-ng-view/</guid>
      <description>

&lt;p&gt;Templating is fantastic for reducing the amount of code you have to maintain, if you have a defined structure to all of your webapp&amp;rsquo;s pages then templating allows you to create one master page for this structure and then just replace pieces of the page with different content based on the url.&lt;/p&gt;

&lt;p&gt;For instance, say we had a blog. If our blog had the same nav bar, the same header image, the same footer, then it makes sense to put this in one place instead of constantly repeating it throughout every page in your application. By defining all this in one page you then have the ability to update your entire application&amp;rsquo;s design very quickly as opposed to making changes in what could potentially be hundreds of files.&lt;/p&gt;

&lt;h2 id=&#34;the-templating-solution&#34;&gt;The Templating Solution&lt;/h2&gt;

&lt;p&gt;In this tutorial I’ll be introducing you to the ng-view angularjs directive. This directive is fantastic for creating multiple page applications that are fast and require no reloading providing a fluent motion through your web application.&lt;/p&gt;

&lt;p&gt;You can check out the official documentation for the ng-view directive here: &lt;a href=&#34;https://docs.angularjs.org/api/ngRoute/directive/ngView&#34;&gt;https://docs.angularjs.org/api/ngRoute/directive/ngView&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-templating&#34;&gt;Basic Templating&lt;/h2&gt;

&lt;div class=&#34;github-link&#34;&gt;
Full source code is available here: &lt;a href=&#34;https://github.com/elliotforbes/AngularJS-1.4.5-ngView&#34;&gt;AngularJS ngView Directive&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In this tutorial we’ll be creating a simple shop with a home view, a categories view and a single view.&lt;/p&gt;

&lt;h2 id=&#34;our-controllers&#34;&gt;Our Controllers&lt;/h2&gt;

&lt;p&gt;In the interest of brevity I&amp;rsquo;ve kept this as a single file but these could be split into multiple files if you so wished.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, [&#39;ngRoute&#39;]);

testApp.config(function($routeProvider) {
    $routeProvider
        .when(&#39;/&#39;, {
            templateUrl : &#39;views/home.html&#39;,
            controller  : &#39;testController&#39;
        })
        .when(&#39;/category/:name&#39;, {
            templateUrl : &#39;views/category.html&#39;,
            controller  : &#39;CategoryController&#39;
        })
        .when(&#39;/item/:name&#39;, {
            templateUrl : &#39;views/single.html&#39;,
            controller  : &#39;ShopController&#39;
        });
});

testApp.controller(&#39;testController&#39; , function ($scope) {
    
    $scope.myNumber = 1;
    
    $scope.go = function() {
        $scope.myNumber = $scope.myNumber + 1;
        console.log(&amp;quot;hit&amp;quot;);
    };
    
});

testApp.controller(&#39;CategoryController&#39;, function ($scope, $routeParams) {
    
    $scope.categoryName = $routeParams.name;
    
    $scope.items = [
        { name : &amp;quot;iPhone&amp;quot;, cost : &amp;quot;12.99&amp;quot; },
        { name : &amp;quot;iPad&amp;quot;, cost : &amp;quot;14.99&amp;quot; }
    ];
    
});

testApp.controller(&#39;ShopController&#39;, function ($scope, $routeParams) {
    
    $scope.itemName = $routeParams.name;

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;our-master-page&#34;&gt;Our Master Page:&lt;/h3&gt;

&lt;p&gt;This is our master template. Here we can define our title, all of our asset imports as well as anything else that we want to feature on every page. In this instance, we&amp;rsquo;ll want &amp;ldquo;My Amazing Web Store&amp;rdquo; featured at the top of every page of our application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular-route.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;h2&amp;gt;My Amazing Web Store&amp;lt;/h2&amp;gt;
    
    &amp;lt;div ng-view&amp;gt;&amp;lt;/div&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;our-templates&#34;&gt;Our Templates&lt;/h2&gt;

&lt;p&gt;For brevity I&amp;rsquo;ve kept this in a single code block. You&amp;rsquo;ll see below the contents of our three different html pages. As you can see we&amp;rsquo;ve only defined what is going to change whenever we look at these pages and haven&amp;rsquo;t touched our master template. When viewing all of these routes you should see our h2 tag - My Amazing Web Store - featured at the top followed by each pages distinct html.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;... category.html
&amp;lt;h2&amp;gt;{{ categoryName }}&amp;lt;/h2&amp;gt;

&amp;lt;ul&amp;gt;
    &amp;lt;li ng-repeat=&amp;quot;item in items&amp;quot;&amp;gt;
        &amp;lt;a href=&amp;quot;#/item/{{item.name}}&amp;quot;&amp;gt;{{item.name}}&amp;lt;/a&amp;gt; : ${{item.cost}}
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
... home.html
&amp;lt;h2&amp;gt;Home Page&amp;lt;/h2&amp;gt;

&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#/category/apple&amp;quot;&amp;gt;Apple Products&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#/category/microsoft&amp;quot;&amp;gt;Microsoft Products&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    
&amp;lt;/ul&amp;gt;
... 
... single.html
&amp;lt;h2&amp;gt;Item&amp;lt;/h2&amp;gt;

&amp;lt;p&amp;gt;{{ itemName }}&amp;lt;/p&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;displaying-custom-components&#34;&gt;Displaying Custom Components&lt;/h2&gt;

&lt;p&gt;The above method is great for displaying very simple routes that match to a page and a controller, but what happens if you have defined components? How do you display different components on different routes? Well we can actually make some slight modifications to one of our routes and pass the component like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// a very simple component that has a html template and a
// controller bound to it.
var OurComponent = {
  templateUrl: &#39;path/to/our-component.html&#39;,
  controller: OurComponentController
}

angular.module(&#39;ourApp&#39;)
  .component(&#39;OurComponent&#39;, OurComponent);
// end of our component

...
$routeProvider
      .when(&#39;/our-component&#39;, {
          template: &#39;&amp;lt;our-component&amp;gt;&amp;lt;/our-component&amp;gt;&#39;
      })
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you found this article useful or have any further questions then please feel free to let me know in the comments section below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Directives Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-directives-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:08:03 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-directives-tutorial/</guid>
      <description>&lt;p&gt;The official documentation for AngularJS’s directives can be found here: &lt;a href=&#34;https://docs.angularjs.org/guide/directive&#34;&gt;AngularJS Directives&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;What Are Directives?&lt;/h2&gt;

&lt;p&gt;Directives essentially allow you to attach behaviors to specific DOM elements. This means you can define your own custom html-like tags and attach all of the functionality you desire to that tag which is perfect for creating breaking up your applications into distinct modules which can be worked on simultaneously in teams of developers.&lt;/p&gt;

&lt;p&gt;Directives are an essential part of the AngularJS framework and if you want a bit of background behind why you should define your own directives rather than use the ng-controller directive then check out this post by one of Paypal’s engineers - &lt;a href=&#34;https://medium.com/@bluepnume/sane-scalable-angular-apps-are-tricky-but-not-impossible-lessons-learned-from-paypal-checkout-c5320558d4ef&#34;&gt;Lessons learned from rebuilding Paypal&#39;s checkout in AngularJS&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Implementing Your Own Simple Directive:&lt;/h2&gt;

&lt;p&gt;In this tutorial we’ll just be implementing a very simple directive that defines our mydir tag and returns some text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.directive(&#39;mydir&#39;, function () {
    return {
        template: &#39;This is my directive&#39;
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once we’ve added this to our scripts.js file we can then call this directive in our html file like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;h2&amp;gt;Directives Tutorial&amp;lt;/h2&amp;gt;
    
    &amp;lt;mydir&amp;gt;&amp;lt;/mydir&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open this up in a browser and you should see our text rendering in place of our mydir element.&lt;/p&gt;

&lt;h2&gt;Implementing Directives using HTML Templates&lt;/h2&gt;

&lt;p&gt;For directives that return more than a couple of lines of html code it&#39;s best to separate this html code into another file. In this example I&#39;ll keep the html pretty simple as we&#39;ll just be returning &#34;Hello, World!&#34; and a few other things.&lt;/p&gt;

&lt;h4&gt;Application Structure&lt;/h4&gt;

&lt;p&gt;With regards to folder structure it&#39;s best to separate each directive into it&#39;s own folder within a &#34;Components&#34; folder. This essentially modularizes your code which can be highly useful if you work in teams and need multiple people to work on different bits of your application at the same time.&lt;/p&gt;

&lt;p&gt;Our App will take the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app/
---- controllers/
-------- AppController.js
---- Components/
-------- MyDirective/
------------ MyDirective.js
------------ MyDirectiveTemplate.html
views/
---- index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Index.html&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;myapp&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;TutorialEdge.net&amp;lt;/title&amp;gt;
        &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.9/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h2&amp;gt;Introduction to AngularJS Templates&amp;lt;/h2&amp;gt;
        
        &amp;lt;mydirective&amp;gt;&amp;lt;/mydirective&amp;gt;
        
        &amp;lt;script src=&amp;quot;../controllers/MainController.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&amp;quot;../components/MyDirective/MyDirective.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;MyDirective.js&lt;/h3&gt;
~~~
var app = angular.module(&#39;myapp&#39;, []);

app.directive(&#34;mydirective&#34;, function() {
    return {
        templateUrl: &#39;../components/MyDirective/DirectiveTemplate.html&#39;
    }
})
~~~
&lt;h3&gt;DirectiveTemplate.html&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;Hello World!&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Results&lt;/h2&gt;

&lt;p&gt;Run this on any test-server you have set up and you should see your index.html and the directive template.html page rendering in your browser. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Template Route Provider Tutorial</title>
      <link>/post/javascript/angularjs/template-route-provider-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 09:04:56 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/template-route-provider-tutorial/</guid>
      <description>&lt;p&gt;This tutorial covers how you can utilize AngularJS’s $routeProvider in order to create a multiple page application that features one master page. The official documentation for Routing and multiple views can be found here: &lt;a href=&#34;https://docs.angularjs.org/tutorial/step_07&#34; target=&#34;_blank&#34;&gt;https://docs.angularjs.org/tutorial/step_07 &lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Our Project&lt;/h2&gt;

&lt;p&gt;The structure of our project for this tutorial is going to look a little something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index.html
scripts.js
view/
-- home.html
-- contact.html
-- about.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With our index.html being our master page in which we define all javascript dependencies and styling for things like the nav bar and footer etc. We would then typically put all of our page specific content in their own html files. This can be incredibly handy for times when you want to make a simple change to the header of your site that you want reflected across your whole site as it means you only have to make the change in one place.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;In this tutorial we’ll define some relatively simple routes that each have their own defined controllers and templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, [&#39;ngRoute&#39;]);

testApp.config(function($routeProvider) {
    $routeProvider
        .when(&#39;/&#39;, {
            templateUrl : &#39;views/home.html&#39;,
            controller  : &#39;testController&#39;
        })
        .when(&#39;/about&#39;, {
            templateUrl : &#39;views/about.html&#39;,
            controller  : &#39;AboutController&#39;
        })
        .when(&#39;/contact&#39;, {
            templateUrl : &#39;views/contact.html&#39;,
            controller  : &#39;ContactController&#39;
        });
});

testApp.controller(&#39;testController&#39; , function ($scope) {
   $scope.home = &amp;quot;This is the homepage&amp;quot;;
});

testApp.controller(&#39;AboutController&#39;, function($scope) {
    $scope.about = &amp;quot;You are awesome&amp;quot;;
});

testApp.controller(&#39;ContactController&#39;, function($scope) {
    $scope.contact = &amp;quot;You can&#39;t contact me, go away.&amp;quot;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Our Index.html Page:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS ng-if child scopes example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular-route.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;h2&amp;gt;Routing Tutorial&amp;lt;/h2&amp;gt;
    
    &amp;lt;div ng-view&amp;gt;&amp;lt;/div&amp;gt;
    
    &amp;lt;script src=&amp;quot;scripts.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally our 3 pages, concatenated into one gist for brevity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- OUR ABOUT.HTML --&amp;gt;
{{about}}
&amp;lt;!-- END OF ABOUT.HTML --&amp;gt;

&amp;lt;!-- OUR CONTACT.HTML --&amp;gt;
{{contact}}
&amp;lt;!-- END OF CONTACT.HTML --&amp;gt;

&amp;lt;!-- OUR HOME.HTML --&amp;gt;
{{home}}
&amp;lt;!-- END OF HOME.HTML --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Interacting With RESTful APIs Using $http in AngularJS</title>
      <link>/post/javascript/angularjs/interacting-with-apis-using-http-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 09:03:47 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/interacting-with-apis-using-http-angularjs/</guid>
      <description>

&lt;p&gt;In this tutorial I will be showing you how we can create a frontend angularjs application that could interact with a RESTful API. In order for our Angular applications to be able to make API calls, we’ll have to use the $http service which gives us the ability to perform GET, POST, PUT and DELETE api calls, there are other types of calls but for now we’ll focus on these 4.&lt;/p&gt;

&lt;h2 id=&#34;angularjs-s-http&#34;&gt;AngularJS&amp;rsquo;s $http&lt;/h2&gt;

&lt;p&gt;AngularJS&amp;rsquo;s $http service allows us to communicate with other servers using the browsers XMLHttpRequest object or via JSONP.&lt;/p&gt;

&lt;p&gt;It takes in a single argument which is a configuration object that generates a HTTP request and returns a promise. Once the HTTP request is completed it can then execute either the success callback or or the error callback, both of which expose the response object.&lt;/p&gt;

&lt;p&gt;This response object has multiple properties which we can easily parse.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data - the response body
status - the HTTP status code
headers - Header getter function
config - the configuration object used to generate the request
statusText - the HTTP status text of the response
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Getting Started:&lt;/h2&gt;

&lt;p&gt;To start us off we’ll be creating a very simple html page that features one button. This button, when clicked will call a function in an angular controller in the scripts.js file that will in turn perform a GET request using the GET shortcut method that AngularJS provides.&lt;/p&gt; 

&lt;p&gt;Below you’ll find the source code for our simplistic index page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html ng-app=&amp;quot;testApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;AngularJS $Http service tutorial example&amp;lt;/title&amp;gt;
    &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;testController&amp;quot;&amp;gt;
    
    &amp;lt;h2&amp;gt;$http Service Tutorial&amp;lt;/h2&amp;gt;
    
    &amp;lt;button ng-click=&amp;quot;getRequest()&amp;quot;&amp;gt;Test Rest&amp;lt;/button&amp;gt;
    
    &amp;lt;script src=&amp;quot;script.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Our Controller:&lt;/h3&gt;

&lt;p&gt;So now that we’ve got our index page setup, we’ll have to define our controller and function in our script.js file. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope, $http) {
    $scope.home = &amp;quot;This is the homepage&amp;quot;;
    
    $scope.getRequest = function () {
        console.log(&amp;quot;I&#39;ve been pressed!&amp;quot;);  
        $http.get(&amp;quot;http://urlforapi.com/get?name=Elliot&amp;quot;)
            .then(function successCallback(response){
                $scope.response = response;
            }, function errorCallback(response){
                console.log(&amp;quot;Unable to perform get request&amp;quot;);
            });
    };
    
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll see that consuming RESTful APIs using GET requests only requires one $http.get request with the url of the API passed in as a parameter. What you intend to do with the results of this query is entirely up to yourself and depends on what is returned. If it were say a JSON object then you could bind that to a $scope variable and then print it all in your frontend.&lt;/p&gt;

&lt;h3&gt;Post Requests&lt;/h3&gt;

&lt;p&gt;POST requests are a way we can pass data from our application to an API. This is useful if we intend to perform actions such as updating data held by our API etc.&lt;/p&gt;

&lt;p&gt;POST requests take an almost identical form to get requests and look like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope, $http) {
    $scope.home = &amp;quot;This is the homepage&amp;quot;;
    
    
//    Our GET request function
    $scope.getRequest = function () {
        console.log(&amp;quot;I&#39;ve been pressed!&amp;quot;);  
        $http.get(&amp;quot;http://urlforapi.com/get?name=Elliot&amp;quot;)
            .then(function successCallback(response){
                $scope.response = response;
            }, function errorCallback(response){
                console.log(&amp;quot;Unable to perform get request&amp;quot;);
            });
    };
    
//    Our POST request function
    $scope.postRequest = function () {
        $http.post(&amp;quot;http://urlforapi.com/&amp;quot;, data)
            .then(function successCallback(response){
                console.log(&amp;quot;Successfully POST-ed data&amp;quot;);
            }, function errorCallback(response){
                console.log(&amp;quot;POST-ing of data failed&amp;quot;);
            });
    };
    
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;forcing-cache-refresh&#34;&gt;Forcing Cache Refresh&lt;/h2&gt;

&lt;p&gt;One of the most annoying issues I&amp;rsquo;ve faced when I&amp;rsquo;m developing web applications is when you are receiving cached results for $http requests. One of the quickest ways to combat against this is to append the current datetime to your url so that it forces itself not to use the cached results.&lt;/p&gt;

&lt;p&gt;We can do that like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var testApp = angular.module(&#39;testApp&#39;, []);

testApp.controller(&#39;testController&#39; , function ($scope, $http) {
    $scope.home = &amp;quot;This is the homepage&amp;quot;;
    
    
//    Our GET request function
    $scope.getRequest = function () {
        console.log(&amp;quot;I&#39;ve been pressed!&amp;quot;);  
        // Notice how I&#39;ve appened &#39;&amp;amp;v=&#39; + Date.now() to our query
        $http.get(&amp;quot;http://urlforapi.com/get?name=Elliot&amp;amp;v=&amp;quot; + Date.now())
            .then(function successCallback(response){
                $scope.response = response;
            }, function errorCallback(response){
                console.log(&amp;quot;Unable to perform get request&amp;quot;);
            });
    };=
    
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS Filter Search Tutorial</title>
      <link>/post/javascript/angularjs/angularjs-filter-search-tutorial/</link>
      <pubDate>Sat, 15 Apr 2017 08:59:44 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/angularjs-filter-search-tutorial/</guid>
      <description>&lt;h3&gt;Links:&lt;/h3&gt;

&lt;div class=&#34;github-link&#34;&gt;Full Source Code: &lt;a href=&#34;https://github.com/emforce/AngularFuzzySearch&#34;&gt;https://github.com/emforce/AngularFuzzySearch&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;In this tutorial I’ll be showing you how you can create a tool which allows you to type in a search query in an input box and see all matches below that input box without having to reload the page and we’ll be leveraging AngularJS’s filter mechanic to do so.&lt;/p&gt;

&lt;p&gt;To get us started we’ll start with mocking up what our page will look like, this is just going to be a basic no-frills design to get us started but feel free to modify it to suit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html ng-app=&amp;quot;myApp&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Google Search Like Functionality&amp;lt;/title&amp;gt;
  &amp;lt;!-- Latest compiled and minified CSS --&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
  
  &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body ng-controller=&amp;quot;SearchController&amp;quot;&amp;gt;
    
  &amp;lt;div class=&amp;quot;search-box&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;col-lg-4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;col-lg-4&amp;quot;&amp;gt;
              &amp;lt;h2&amp;gt;TutorialEdge Search: {{query}}&amp;lt;/h2&amp;gt;
              &amp;lt;form class=&amp;quot;form&amp;quot;&amp;gt;
                  &amp;lt;input class=&amp;quot;form-control&amp;quot; type=&amp;quot;text&amp;quot; ng-model=&amp;quot;query&amp;quot; ng-change=&amp;quot;updateValue()&amp;quot;&amp;gt;
              &amp;lt;/form&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class=&amp;quot;col-lg-4&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class=&amp;quot;search-results&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;          
          &amp;lt;div class=&amp;quot;result&amp;quot; ng-repeat=&amp;quot;result in results | filter: query&amp;quot;&amp;gt;
              &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;{{result.title}}&amp;lt;/h2&amp;gt;&amp;lt;/a&amp;gt;
              &amp;lt;p class=&amp;quot;url&amp;quot;&amp;gt;{{result.link}}&amp;lt;/p&amp;gt;
              &amp;lt;p&amp;gt;{{result.content}}&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  
  &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
          &amp;lt;p class=&amp;quot;info&amp;quot;&amp;gt;
              Full Source Code for this example can be found here: Github Link
          &amp;lt;/p&amp;gt;
          &amp;lt;p class=&amp;quot;info&amp;quot;&amp;gt;
              Original Tutorial Link: http://tutorialedge.net
          &amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  
  &amp;lt;script src=&amp;quot;AppController.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Our CSS&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.search-box{
    background-color: #f1f1f1;
    border-bottom: 1px solid #E5E5E5;
    margin-bottom: 20px;
    padding-top: 20px;
    padding-bottom: 20px;
    text-align: center;
}

.search-box h2{
    color: #4285F4;
    margin: 0;
    padding: 0;
    margin-bottom: 10px;
}

.search-box input {
    border-radius: 0;
}

.result h2{
    font-size: 18px;
        display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-text-overflow: ellipsis;
    white-space: nowrap;
}

.result p{
    color: #545454;
    font-size: small;
    font-family: arial,sans-serif;
}
.result{
    padding-bottom: 20px;
    border-bottom: 1px solid #E5E5E5;
}

.result p.url{
        color: #006621;
    font-style: normal;
        font-size: 15px;
        font-weight: bold;
        padding-top: 0px;
        margin-bottom: 5px;
        padding-bottom: 2px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just basic html so far but let’s add some angularjs functionality to it and get all of our results listing in a google like manner. We’ll skip pagination as that’s going to be the subject of my next tutorial.&lt;/p&gt;

&lt;p&gt;To get us started we’ll just be listing everything from the following JSON array, however you could easily hook this up to a REST api that returns meaningful results if you wished too. We’ll create our own controller for this one-page application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myApp = angular.module(&#39;myApp&#39;,[]);

myApp.controller(&#39;SearchController&#39;, [&#39;$scope&#39;, function($scope) {
    
    $scope.results = [
        { title : &amp;quot;Cars&amp;quot;, link: &amp;quot;http://tutorialedge.net&amp;quot;, content: &amp;quot;lorem ipsum doler fox pixel&amp;quot;},
        { title : &amp;quot;Boats&amp;quot;, link: &amp;quot;http://tutorialedge.net&amp;quot;, content: &amp;quot;lorem ipsum doler cat pixel&amp;quot;},
        { title : &amp;quot;Vans&amp;quot;, link: &amp;quot;http://tutorialedge.net&amp;quot;, content: &amp;quot;lorem ipsum doler pig pixel&amp;quot;},
        { title : &amp;quot;Limos&amp;quot;, link: &amp;quot;http://tutorialedge.net&amp;quot;, content: &amp;quot;lorem ipsum doler pixel&amp;quot;}
    ];
    
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we’ve implemented that you should hopefully see the everything in our array listing on our search results page:&lt;/p&gt;

&lt;p&gt;Ok so now that we’ve got everything we need to display our search results we can move onto implementing our search box. This will essentially take in our search query string and then filter the results that we’ve listed to show only those that present a match. The match could be present in either the title, the url or the content of the list we are using so it’s kind of similar to the way google shows you pages for things that contain information about specific topics.&lt;/p&gt;

&lt;h2&gt;The Filter Code:&lt;/h2&gt;

&lt;p&gt;In order for us to make this list filter-able we simply have to add the following to our ng-repeat statement. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;result&amp;quot; ng-repeat=&amp;quot;result in results | filter: query&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;{{result.title}}&amp;lt;/h2&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;p class=&amp;quot;url&amp;quot;&amp;gt;{{result.link}}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;{{result.content}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving Website Visitor Information Using Javascript</title>
      <link>/post/javascript/retrieving-visitor-information-javascript/</link>
      <pubDate>Sat, 15 Apr 2017 08:40:42 +0100</pubDate>
      
      <guid>/post/javascript/retrieving-visitor-information-javascript/</guid>
      <description>&lt;p&gt;In this tutorial I&#39;ll be demonstrating how you can retrieve key information about all your website visitors using a very simple javascript snippet. This could in theory be placed on all your website&#39;s pages and then returned to a REST API which then stores this information for you to analyse in the future. I thought this would be an interesting little snippet for those of you thinking of rolling your own google analytics-like tracking.&lt;/p&gt;

&lt;h2&gt;The Web Page&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Analytics Engine Test Page&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        
        &amp;lt;h1&amp;gt;This is my test webpage&amp;lt;/h1&amp;gt;
        
        &amp;lt;script src=&amp;quot;analytics.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The JavaScript File&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&amp;quot;Cookies: &amp;quot; + navigator.cookieEnabled);
console.log(&amp;quot;Browser Language: &amp;quot; + navigator.browserLanguage);
console.log(&amp;quot;Language: &amp;quot; + navigator.language);
console.log(&amp;quot;Platform: &amp;quot; + navigator.platform);
console.log(&amp;quot;Connection Speed: &amp;quot; + navigator.connectionSpeed);
console.log(&amp;quot;User Agent: &amp;quot; + navigator.userAgent);
console.log(&amp;quot;Webdriver: &amp;quot; + navigator.webdriver);
console.log(&amp;quot;Geolocation: &amp;quot; + navigator.geolocation);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The End Result&lt;/h2&gt;

&lt;p&gt;If you visit this web page in your browser of choice and open up the console, you should see just about everything you can see about yourself displayed in the console. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping NodeJS Applications Running Forever Using PM2</title>
      <link>/post/javascript/nodejs/keeping-node-apps-running-forever-pm2/</link>
      <pubDate>Sat, 15 Apr 2017 08:38:40 +0100</pubDate>
      
      <guid>/post/javascript/nodejs/keeping-node-apps-running-forever-pm2/</guid>
      <description>&lt;p&gt;If you write an application that you need to keep running forever on your servers then this is the tutorial for you. &lt;/p&gt;

&lt;p&gt;If you&#39;re a software developer working on business critical applications and have to adhere to strict Service Level Agreements (SLAs for short) then you know just how vital it is to have your applications back up and running the second they fall over, every second counts when trying to achieve the 5 9&#39;s or 99.999% availability throughout the year. In this tutorial I&#39;ll be demonstrating the effectiveness of PM2 which is a production process manager for Node.js applications which also features a built-in load balancer for those high-performance applications. &lt;/p&gt;

&lt;p&gt;PM2 is an opensource bit of tech that&#39;s currently available here: &lt;a href=&#34;https://github.com/Unitech/pm2&#34; target=&#34;_blank&#34;&gt;https://github.com/Unitech/pm2&lt;/a&gt; and is currently owned and maintained by an Alexandre Strzelewicz from &lt;a href=&#34;http://keymetrics.io&#34; target=&#34;_blank&#34;&gt;http://keymetrics.io&lt;/a&gt; for those of you who want to check out his other work. &lt;/p&gt;

&lt;h2&gt;Installing PM2&lt;/h2&gt;

&lt;p&gt;PM2 doesn&#39;t require much configuration, if any, and if you&#39;ve got NPM installed on your machine then installing PM2 is just a case of running the following command: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install pm2 -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that&#39;s installed on your machine then you are then ready to go. &lt;/p&gt;

&lt;h2&gt;Starting an Application&lt;/h2&gt;

&lt;p&gt;Starting a node application that you want to keep running forever is as simple as this: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pm2 start app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;More Info&lt;/h2&gt;

&lt;p&gt;PM2&#39;s official can be found here: &lt;a href=&#34;http://pm2.keymetrics.io/&#34; target=&#34;_blank&#34;&gt;http://pm2.keymetrics.io/&lt;/a&gt; should you wish to read up a bit more on this pretty amazing opensource tool and potentially thank the developers for their efforts. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting a Default Value for Select Elements in AngularJS</title>
      <link>/post/javascript/angularjs/setting-default-select-value-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:37:21 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/setting-default-select-value-angularjs/</guid>
      <description>&lt;p&gt;This is just a quick code snippet for those of you facing this slight problem when developing your applications using AngularJS 1.5. This works for those of you &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;select ng-model=&amp;quot;selection&amp;quot; ng-init=&amp;quot;selection =&#39;The First Default Option&#39;&amp;quot;&amp;gt;
    &amp;lt;option&amp;gt;The First Default Option&amp;lt;/option&amp;gt;
    &amp;lt;option&amp;gt;The Second non-default option&amp;lt;/option&amp;gt;
  &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Using Hidden Input in a Form in AngularJS</title>
      <link>/post/javascript/angularjs/hidden-input-form-angularjs/</link>
      <pubDate>Sat, 15 Apr 2017 08:35:56 +0100</pubDate>
      
      <guid>/post/javascript/angularjs/hidden-input-form-angularjs/</guid>
      <description>&lt;p&gt;This ended up being an interesting little problem for me during one of my programming sessions. Below you&#39;ll find a couple of different methods that you can use to pass hidden data to any form submission using AngularJS.&lt;/p&gt;

&lt;h4&gt;Method 1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;someData&amp;quot; ng-model=&amp;quot;data&amp;quot; style=&amp;quot;display: none;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Building a Webserver using ExpressJS and NodeJS</title>
      <link>/post/javascript/nodejs/creating-a-webserver-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:32:01 +0100</pubDate>
      
      <guid>/post/javascript/nodejs/creating-a-webserver-with-nodejs/</guid>
      <description>

&lt;p&gt;This is the first tutorial in a series in which we’ll be building up a website for a domain name I’ve been sitting on for a few years now. This is intended to show you everything it takes in order to program your own website using NodeJS and the new Angular2 framework.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-simple-web-server-using-nodejs-and-expressjs&#34;&gt;Creating a Simple Web Server Using NodeJS and ExpressJS.&lt;/h2&gt;

&lt;p&gt;So the very first thing we need for our site is the foundation and for this we can use a very simple ExpressJS server.&lt;/p&gt;

&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;Before we can begin this series you’ll need to make sure you have the following installed on your computer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS and the NPM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically NodeJS includes the node package manager (NPM) by default so once you’ve installed node on your machine, open up a terminal and test your installation. Type “npm” in your terminal and if everything has been configured correctly you should see the manual for npm printed out.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-our-project&#34;&gt;Setting Up Our Project&lt;/h2&gt;

&lt;p&gt;Create a directory on your development machine and then navigate to that folder using the terminal. Once you are here we can initialize our project with npm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mpm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should then ask you a series of questions that will be used in order to populate a package.json file that this command creates. These aren’t critically important and can be changed at a later date if needed.&lt;/p&gt;

&lt;h2 id=&#34;installing-expressjs&#34;&gt;Installing ExpressJS&lt;/h2&gt;

&lt;p&gt;Once you’ve initialized your project with npm we can then proceed to installing ExpressJS. &lt;code&gt;npm install express --save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command should install ExpressJS into a node_modules directory within your project and this will now allow us to make a start programming our simple web server.&lt;/p&gt;

&lt;h2 id=&#34;implementing-our-server&#34;&gt;Implementing our Server&lt;/h2&gt;

&lt;p&gt;So to begin with you’ll want to create a new js file within your directory. We’ll call this server.js and it’s going to start off like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var express = require(&#39;express&#39;);

var app = express();

app.get(&#39;/&#39;, function (req, res){
    res.send(&amp;quot;Hello World!&amp;quot;); 
});


var server = app.listen(3000, function () {
    var host = server.address().address;
    var port = server.address().port;
    
    console.log(&amp;quot;GadgetEdge.net listening at http://%s:%s&amp;quot;, host, port); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you’ve got this in your server.js file we can test it out. Open up your terminal and navigate to your project’s directory and then run your server code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should start the server and if we navigate to our browser and type: &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; you should see Hello World! Printed out.&lt;/p&gt;

&lt;h2 id=&#34;improving-our-server&#34;&gt;Improving Our Server&lt;/h2&gt;

&lt;p&gt;So now that we’ve got a basic server up and running we now need to improve it a bit and give it functionality like serving our html files as well as all our assets.&lt;/p&gt;

&lt;p&gt;First of all we are going to create a public directory within our project that will house all of our website files. Within this create an index.html page and another directory called assets. Within this assets folder create another file called: style.css This will house all of our css for our site.&lt;/p&gt;

&lt;p&gt;Next thing we need to do is point our express server to look at this new public directory. We can do this like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// this line allows us to use the expressjs module
var express = require(&#39;express&#39;);

// Add this line so we can serve files from our local
// directory
var path = require(&#39;path&#39;);
var app = express();

// Add the abillity to serve our static files from the public directory
app.use(express.static(&#39;public&#39;));

// Here we serve up our index page
app.get(&#39;/&#39;, function(req, res) {
    res.sendFile(path.join(__dirname + &#39;/public/index.html&#39;));
});


var server = app.listen(3000, function () {
    var host = server.address().address;
    var port = server.address().port;
    
    console.log(&amp;quot;GadgetEdge.net listening at http://%s:%s&amp;quot;, host, port); 
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;checking-it-all-works&#34;&gt;Checking it all works&lt;/h2&gt;

&lt;p&gt;Once you’ve done all this, restart your server in the terminal by pressing ctrl-c or cmd-c and then restart it by running node server.js. Again navigate to localhost:3000 and you should see your index.html page rendered for you. Test the configuration by changing some of the css.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>