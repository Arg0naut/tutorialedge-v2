<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xml on TutorialEdge.net</title>
    <link>https://tutorialedge.net/tags/xml/index.xml</link>
    <description>Recent content in Xml on TutorialEdge.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://tutorialedge.net/tags/xml/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating and Deleting Directories With NodeJS</title>
      <link>https://tutorialedge.net/post/javascript/nodejs/creating-deleting-directories-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:17:02 +0100</pubDate>
      
      <guid>https://tutorialedge.net/post/javascript/nodejs/creating-deleting-directories-with-nodejs/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;In this tutorial I’ll be showing you how to create and delete directories using NodeJS&lt;/strong&gt; and we’ll be using the mkdirp and the rimraf node package in order to achieve this.&lt;/p&gt;

&lt;h2 id=&#34;creating-directories&#34;&gt;Creating Directories&lt;/h2&gt;

&lt;p&gt;In order to create a directory we’ll need first download the mkdirp npm package, we can do this like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install mkdirp --local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should install the mkdirp package as well as any of it’s dependencies in a node_modules directory within your current directory. Once this has completed we can then start using this new package.&lt;/p&gt;

&lt;p&gt;If you wish to read up more about this package you check it’s code out here: &lt;a href=”https://github.com/substack/node-mkdirp” target=”_blank”&gt;mkdirp github&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;The Code&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// first we import our newly installed mkdirp
// package so that we can use it further down
var mkdirp = require(&#39;mkdirp&#39;);

// and then we call it giving 2 parameters, the first
// being the name of the directory we wish to create
// and the second a callback function.
mkdirp(&#39;test&#39;, function (err){
    // if any errors then print the errors to our console
    if(err) console.log(err);
    // else print a success message.
    console.log(&amp;quot;Successfully created test directory&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Deleting Directories in Node&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In order to delete directories using node we’ll use the rimraf package&lt;/strong&gt; and we’ll need to again install this using the node package manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install rimraf --local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, if you want to see the code for this package you can do so &lt;a href=”https://github.com/isaacs/rimraf” target=”_blank”&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var rimraf = require(&#39;rimraf&#39;);

rimraf(&#39;test&#39;, function(err){
    if (err) console.log(err);
    console.log(&amp;quot;Successfully deleted a directory&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this using node delete.js and you should hopefully see the success message printed out in your console as well as the test directory we created in the first part of the tutorial deleted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Editing XML Files With NodeJS</title>
      <link>https://tutorialedge.net/post/javascript/nodejs/editing-xml-files-with-nodejs/</link>
      <pubDate>Sat, 15 Apr 2017 08:14:10 +0100</pubDate>
      
      <guid>https://tutorialedge.net/post/javascript/nodejs/editing-xml-files-with-nodejs/</guid>
      <description>&lt;p&gt;XML files are still widely used in enterprise programs and being able to manipulate xml files can be incredibly important.&lt;/p&gt;

&lt;h2&gt;XML2JS Node Package&lt;/h2&gt;

&lt;p&gt;In this tutorial I’ll be demonstrating how you can easily manipulate XML files using the xml2js node package. This package is great due to the fact it reads in an xml string and converts it to a far easier to use json structure. &lt;/p&gt;

&lt;h4&gt;Reading in our XML File&lt;/h4&gt;

&lt;p&gt;In order for us to read in our XML file we will need to use the FS node package. You can install this by navigating to your command line and typing: &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;npm install fs --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you’ve successfully installed this, create a new js file and type the following: &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fs = require(&#39;fs&#39;);

fs.readFile(&#39;test.xml&#39;, &#39;utf-8&#39;, function (data, err){
    if(err) console.log(err);
    console.log(data);    
});       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Below you’ll find a sample xml file that we’ll be using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;root&amp;gt;
    &amp;lt;graph&amp;gt;
        &amp;lt;node&amp;gt;
            &amp;lt;name&amp;gt;Node 1&amp;lt;/name&amp;gt;
            &amp;lt;weight&amp;gt;24&amp;lt;/weight&amp;gt;
        &amp;lt;/node&amp;gt;
        &amp;lt;node&amp;gt;
            &amp;lt;name&amp;gt;Node 2&amp;lt;/name&amp;gt;
            &amp;lt;weight&amp;gt;18&amp;lt;/weight&amp;gt;
        &amp;lt;/node&amp;gt;
        &amp;lt;node&amp;gt;
            &amp;lt;name&amp;gt;Node 3&amp;lt;/name&amp;gt;
            &amp;lt;weight&amp;gt;47&amp;lt;/weight&amp;gt;
        &amp;lt;/node&amp;gt;
        &amp;lt;node&amp;gt;
            &amp;lt;name&amp;gt;Node 4&amp;lt;/name&amp;gt;
            &amp;lt;weight&amp;gt;58&amp;lt;/weight&amp;gt;
        &amp;lt;/node&amp;gt;
    &amp;lt;/graph&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Converting Our XML Data to Json&lt;/h2&gt;

&lt;p&gt;Ok, so now that we’ve got the ability to read our xml files, we can then convert this to a far easier format to work with. The xml2js package is an excellent package that will take in any xml string and convert it to a json object. Again we can install this using the node package manager:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;npm install xml2js --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once this is installed, modify your existing code to use the parseString method like so: &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fs = require(&#39;fs&#39;),
    parseString = require(&#39;xml2js&#39;).parseString;

fs.readFile(&#39;test.xml&#39;, &#39;utf-8&#39;, function (err, data){
    if(err) console.log(err);
    // we log out the readFile results    
    console.log(data);
    // we then pass the data to our method here
    parseString(data, function(err, result){
        if(err) console.log(err);
        // here we log the results of our xml string conversion
        console.log(result); 
    });
});       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run this you should see our newly created JSON object printed out in the console.&lt;/p&gt;

&lt;h2&gt;Editing our New JSON Object&lt;/h2&gt;

&lt;p&gt;JSON object manipulation is incredibly in javascript. I’m not going to go into depth about how we can edit it but as a means of demonstrating how we can edit the xml I’m going to change the name of the weight of the first node in our xml file. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fs = require(&#39;fs&#39;),
    parseString = require(&#39;xml2js&#39;).parseString;

fs.readFile(&#39;test.xml&#39;, &#39;utf-8&#39;, function (err, data){
    if(err) console.log(err);
    // we log out the readFile results    
    console.log(data);
    // we then pass the data to our method here
    parseString(data, function(err, result){
        if(err) console.log(err);
        // here we log the results of our xml string conversion
        console.log(result); 
        // save our json to a variable
        var json = result;
        // edit the first node’s weight and set it to 99
        json.root.graph[0].node[0].weight = &amp;quot;99&amp;quot;;
                  
    });
});       
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Converting to XML and Writing to FIle&lt;/h2&gt;

&lt;p&gt;Now that we’ve successfully edited our json, we can then convert it back to xml and finally write it to a file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fs = require(&#39;fs&#39;),
    parseString = require(&#39;xml2js&#39;).parseString,
    xml2js = require(&#39;xml2js&#39;);

fs.readFile(&#39;test.xml&#39;, &#39;utf-8&#39;, function (err, data){
    if(err) console.log(err);
    // we log out the readFile results    
    console.log(data);
    // we then pass the data to our method here
    parseString(data, function(err, result){
        if(err) console.log(err);
        // here we log the results of our xml string conversion
        console.log(result); 
        
        var json = result;
        
        json.root.graph[0].node[0].weight = &amp;quot;99&amp;quot;;
        
        // create a new builder object and then convert
        // our json back to xml.
        var builder = new xml2js.Builder();
        var xml = builder.buildObject(json);
        
        fs.writeFile(&#39;edited-test.xml&#39;, xml, function(err, data){
            if (err) console.log(err);
            
            console.log(&amp;quot;successfully written our update xml to file&amp;quot;);
        })
                  
    });
});       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this and you should see our newly created and updated xml within the same directory as your node script.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>